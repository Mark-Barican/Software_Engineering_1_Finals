{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/auth.ts","../../server/routes/profile.ts","../../server/routes/admin.ts","../../server/routes/librarian.ts","../../server/routes/student.ts","../../server/models/SearchHistory.ts","../../server/models/User.ts","../../server/routes/search.ts","../../server/routes/books.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { Request, Response } from \"express\";\nimport mongoose from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport crypto from \"crypto\";\nimport multer from \"multer\";\nimport passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\n\n// Helper function to parse user agent and extract device info\nfunction parseUserAgent(userAgent: string, ipAddress: string) {\n  const deviceInfo = {\n    browser: \"Unknown\",\n    os: \"Unknown\", \n    device: \"Unknown\",\n    ipAddress: ipAddress || \"Unknown\"\n  };\n\n  if (userAgent) {\n    // Browser detection\n    if (userAgent.includes(\"Chrome\") && !userAgent.includes(\"Edg\")) {\n      deviceInfo.browser = \"Chrome\";\n    } else if (userAgent.includes(\"Firefox\")) {\n      deviceInfo.browser = \"Firefox\";\n    } else if (userAgent.includes(\"Safari\") && !userAgent.includes(\"Chrome\")) {\n      deviceInfo.browser = \"Safari\";\n    } else if (userAgent.includes(\"Edg\")) {\n      deviceInfo.browser = \"Edge\";\n    } else if (userAgent.includes(\"Opera\")) {\n      deviceInfo.browser = \"Opera\";\n    }\n\n    // OS detection\n    if (userAgent.includes(\"Windows\")) {\n      deviceInfo.os = \"Windows\";\n    } else if (userAgent.includes(\"Mac OS\")) {\n      deviceInfo.os = \"macOS\";\n    } else if (userAgent.includes(\"Linux\")) {\n      deviceInfo.os = \"Linux\";\n    } else if (userAgent.includes(\"Android\")) {\n      deviceInfo.os = \"Android\";\n    } else if (userAgent.includes(\"iOS\")) {\n      deviceInfo.os = \"iOS\";\n    }\n\n    // Device detection\n    if (userAgent.includes(\"Mobile\")) {\n      deviceInfo.device = \"Mobile\";\n    } else if (userAgent.includes(\"Tablet\")) {\n      deviceInfo.device = \"Tablet\";\n    } else {\n      deviceInfo.device = \"Desktop\";\n    }\n  }\n\n  return deviceInfo;\n}\n\n// User schema and model\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: { type: String, unique: true },\n  passwordHash: String,\n  role: { \n    type: String, \n    enum: ['admin', 'librarian', 'user'], \n    default: 'user' \n  },\n  // Additional user details\n  userId: { type: String, unique: true }, // Student Number or Employee ID\n  contactNumber: { type: String, default: '' },\n  department: { type: String, default: '' }, // Department/Course/Year for students or Assigned Section for librarians\n  accountStatus: { \n    type: String, \n    enum: ['active', 'inactive', 'suspended'], \n    default: 'active' \n  },\n  preferences: {\n    notifications: { type: Boolean, default: true },\n    defaultSearch: { type: String, default: \"title\" },\n    displayMode: { type: String, default: \"list\" },\n  },\n  profilePicture: {\n    data: { type: Buffer, default: null },\n    contentType: { type: String, default: null },\n    fileName: { type: String, default: null },\n    uploadDate: { type: Date, default: null }\n  },\n  resetToken: String,\n  resetTokenExpiry: Date,\n  sessions: [{\n    sessionId: String,\n    deviceInfo: {\n      browser: String,\n      os: String,\n      device: String,\n      ipAddress: String,\n    },\n    createdAt: { type: Date, default: Date.now },\n    lastActivity: { type: Date, default: Date.now },\n    isActive: { type: Boolean, default: true },\n  }],\n  lastLogin: Date,\n}, { timestamps: true });\nconst User = mongoose.model(\"User\", userSchema);\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"dev_secret\";\n\nconst GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID || \"456992381735-bo0lp411162a4c065lfo65ki21bj1890.apps.googleusercontent.com\";\nconst GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET || \"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\";\n\npassport.use(new GoogleStrategy({\n  clientID: GOOGLE_CLIENT_ID,\n  clientSecret: GOOGLE_CLIENT_SECRET,\n  callbackURL: \"/api/auth/google/callback\"\n}, async (accessToken, refreshToken, profile, done) => {\n  try {\n    let user = await User.findOne({ email: profile.emails[0].value });\n    if (!user) {\n      let newUserId;\n      let tries = 0;\n      while (tries < 20) {\n        // Always add a random 6-digit suffix\n        newUserId = (await generateUserId('user')) + '-' + Math.floor(100000 + Math.random() * 900000);\n        try {\n          user = await User.create({\n            name: profile.displayName,\n            email: profile.emails[0].value,\n            passwordHash: \"\", // No password for Google users\n            userId: newUserId,\n            accountStatus: 'active',\n          });\n          break; // Success!\n        } catch (err: any) {\n          if (err.code === 11000 && err.keyPattern && err.keyPattern.userId) {\n            tries++;\n          } else {\n            return done(err, null);\n          }\n        }\n      }\n      // Fallback: use email as userId if all else fails\n      if (!user) {\n        try {\n          user = await User.create({\n            name: profile.displayName,\n            email: profile.emails[0].value,\n            passwordHash: \"\",\n            userId: profile.emails[0].value, // fallback\n            accountStatus: 'active',\n          });\n        } catch (err) {\n          return done(new Error(\"Failed to create user after multiple attempts and fallback\"), null);\n        }\n      }\n    }\n    return done(null, user);\n  } catch (err) {\n    return done(err, null);\n  }\n}));\n\n// User ID generation function\nexport async function generateUserId(role: string, department?: string): Promise<string> {\n  const currentYear = new Date().getFullYear();\n  const yearSuffix = currentYear.toString().slice(-2); // Last 2 digits of year\n  const currentDate = new Date();\n  const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');\n  const day = currentDate.getDate().toString().padStart(2, '0');\n  const dateCode = month + day; // MMDD format\n  \n  let prefix = '';\n  let deptCode = '';\n  \n  switch (role) {\n    case 'user': // Students\n      prefix = 'STD';\n      deptCode = department ? department.toUpperCase().slice(0, 2) : 'CS';\n      break;\n    case 'librarian':\n      prefix = 'LIB';\n      deptCode = department ? department.toUpperCase().slice(0, 2) : 'LI';\n      break;\n    case 'admin':\n      prefix = 'ADM';\n      deptCode = department ? department.toUpperCase().slice(0, 2) : 'AD';\n      break;\n    default:\n      prefix = 'USR';\n      deptCode = 'XX';\n  }\n  \n  // Get count of users created today for this role and department\n  const startOfDay = new Date();\n  startOfDay.setHours(0, 0, 0, 0);\n  \n  const endOfDay = new Date();\n  endOfDay.setHours(23, 59, 59, 999);\n  \n  const todayCount = await User.countDocuments({\n    role,\n    department: { $regex: new RegExp(`^${deptCode}`, 'i') },\n    createdAt: { $gte: startOfDay, $lte: endOfDay }\n  });\n  \n  // Generate sequential number (001, 002, etc.)\n  const sequentialNumber = (todayCount + 1).toString().padStart(3, '0');\n  \n  // Format: PREFIX-YEARDEPT-DATE-SEQ\n  // Example: STD-25CS-0714-001\n  return `${prefix}-${yearSuffix}${deptCode}-${dateCode}-${sequentialNumber}`;\n}\n\n// POST /api/register\nexport async function register(req: Request, res: Response) {\n  console.log(\"Registration attempt:\", req.body);\n  const { name, email, password, department } = req.body;\n  if (!name || !email || !password) {\n    return res.status(400).json({ success: false, message: \"All fields required\" });\n  }\n  try {\n    console.log(\"Checking if user exists:\", email);\n    const existing = await User.findOne({ email });\n    if (existing) {\n      console.log(\"User already exists\");\n      return res.status(400).json({ success: false, message: \"Email already registered\" });\n    }\n    \n    // Generate user ID for new student\n    const userId = await generateUserId('user', department);\n    console.log(\"Generated user ID:\", userId);\n    \n    console.log(\"Hashing password...\");\n    const passwordHash = await bcrypt.hash(password, 10);\n    console.log(\"Creating new user...\");\n    const user = await User.create({ \n      name, \n      email, \n      passwordHash, \n      userId,\n      department: department || 'Computer Science'\n    });\n    console.log(\"User created successfully:\", user._id);\n    res.json({ \n      success: true, \n      user: { \n        id: user._id, \n        name: user.name, \n        email: user.email, \n        role: user.role,\n        userId: user.userId \n      } \n    });\n  } catch (err) {\n    console.error(\"Registration error:\", err);\n    res.status(500).json({ success: false, message: \"Registration failed\", error: err });\n  }\n}\n\n// POST /api/login\nexport async function login(req: Request, res: Response) {\n  console.log(\"Login attempt:\", req.body);\n  const { email, password } = req.body;\n  if (!email || !password) {\n    return res.status(400).json({ success: false, message: \"All fields required\" });\n  }\n  try {\n    console.log(\"Looking for user:\", email);\n    const user = await User.findOne({ email });\n    console.log(\"User found:\", user ? \"Yes\" : \"No\");\n    \n    if (!user) {\n      return res.status(400).json({ success: false, message: \"Invalid credentials\" });\n    }\n    \n    console.log(\"Comparing passwords...\");\n    const valid = await bcrypt.compare(password, user.passwordHash);\n    console.log(\"Password valid:\", valid);\n    \n    if (!valid) {\n      return res.status(400).json({ success: false, message: \"Invalid credentials\" });\n    }\n    // Create new session\n    const sessionId = crypto.randomBytes(32).toString('hex');\n    const userAgent = req.headers['user-agent'] || '';\n    const ipAddress = req.ip || req.connection.remoteAddress || '';\n    const deviceInfo = parseUserAgent(userAgent, ipAddress);\n    \n    // Issue JWT with session ID\n    const token = jwt.sign({ userId: user._id, sessionId }, JWT_SECRET, { expiresIn: \"7d\" });\n    console.log(\"Token generated successfully\");\n    \n    // Add session to user\n    await User.findByIdAndUpdate(user._id, {\n      $push: {\n        sessions: {\n          sessionId,\n          deviceInfo,\n          createdAt: new Date(),\n          lastActivity: new Date(),\n          isActive: true\n        }\n      },\n      lastLogin: new Date()\n    });\n    \n    res.json({ \n      success: true, \n      token, \n      user: { \n        id: user._id, \n        name: user.name, \n        email: user.email,\n        role: user.role,\n        preferences: user.preferences \n      } \n    });\n  } catch (err) {\n    console.error(\"Login error:\", err);\n    res.status(500).json({ success: false, message: \"Login failed\", error: err });\n  }\n}\n\n// POST /api/forgot-password\nexport async function forgotPassword(req: Request, res: Response) {\n  const { email } = req.body;\n  if (!email) {\n    return res.status(400).json({ success: false, message: \"Email is required\" });\n  }\n  \n  try {\n    const user = await User.findOne({ email });\n    if (!user) {\n      // Don't reveal whether user exists or not for security\n      return res.json({ success: true, message: \"If the email exists, a reset link has been sent\" });\n    }\n    \n    // Generate reset token\n    const resetToken = crypto.randomBytes(32).toString('hex');\n    const resetTokenExpiry = new Date(Date.now() + 3600000); // 1 hour from now\n    \n    // Save token to user\n    await User.findByIdAndUpdate(user._id, {\n      resetToken,\n      resetTokenExpiry\n    });\n    \n    // In a real application, you would send an email here\n    // For now, we'll just return the token (remove this in production)\n    console.log(`Password reset token for ${email}: ${resetToken}`);\n    \n    res.json({ \n      success: true, \n      message: \"If the email exists, a reset link has been sent\",\n      // Remove this in production - only for development\n      resetToken: resetToken\n    });\n  } catch (err) {\n    console.error(\"Forgot password error:\", err);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n}\n\n// POST /api/reset-password\nexport async function resetPassword(req: Request, res: Response) {\n  const { token, password } = req.body;\n  if (!token || !password) {\n    return res.status(400).json({ success: false, message: \"Token and password are required\" });\n  }\n  \n  if (password.length < 6) {\n    return res.status(400).json({ success: false, message: \"Password must be at least 6 characters long\" });\n  }\n  \n  try {\n    const user = await User.findOne({\n      resetToken: token,\n      resetTokenExpiry: { $gt: new Date() }\n    });\n    \n    if (!user) {\n      return res.status(400).json({ success: false, message: \"Invalid or expired reset token\" });\n    }\n    \n    // Hash new password\n    const passwordHash = await bcrypt.hash(password, 10);\n    \n    // Update password and clear reset token\n    await User.findByIdAndUpdate(user._id, {\n      passwordHash,\n      resetToken: null,\n      resetTokenExpiry: null\n    });\n    \n    res.json({ success: true, message: \"Password reset successfully\" });\n  } catch (err) {\n    console.error(\"Reset password error:\", err);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n}\n\n// Middleware to verify JWT token and extract session info\nfunction verifyTokenWithSession(req: Request, res: Response, next: Function) {\n  const auth = req.headers.authorization;\n  if (!auth || !auth.startsWith(\"Bearer \")) {\n    return res.status(401).json({ message: \"Missing or invalid token\" });\n  }\n  const token = auth.split(\" \")[1];\n  try {\n    const payload = jwt.verify(token, JWT_SECRET) as { userId: string; sessionId: string };\n    (req as any).userId = payload.userId;\n    (req as any).sessionId = payload.sessionId;\n    next();\n  } catch (err) {\n    return res.status(401).json({ message: \"Invalid or expired token\" });\n  }\n}\n\n// GET /api/sessions - Get all active sessions for the user\nexport async function getUserSessions(req: Request, res: Response) {\n  try {\n    const user = await User.findById((req as any).userId);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    const activeSessions = user.sessions.filter(session => session.isActive);\n    const currentSessionId = (req as any).sessionId;\n\n    const sessionsData = activeSessions.map(session => ({\n      sessionId: session.sessionId,\n      deviceInfo: session.deviceInfo,\n      createdAt: session.createdAt,\n      lastActivity: session.lastActivity,\n      isCurrent: session.sessionId === currentSessionId\n    }));\n\n    res.json({ success: true, sessions: sessionsData });\n  } catch (err) {\n    console.error(\"Get sessions error:\", err);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n}\n\n// DELETE /api/sessions/:sessionId - Revoke a specific session\nexport async function revokeSession(req: Request, res: Response) {\n  try {\n    const { sessionId } = req.params;\n    const userId = (req as any).userId;\n    const currentSessionId = (req as any).sessionId;\n\n    if (sessionId === currentSessionId) {\n      return res.status(400).json({ message: \"Cannot revoke current session\" });\n    }\n\n    const result = await User.findByIdAndUpdate(\n      userId,\n      { $set: { \"sessions.$[elem].isActive\": false } },\n      { arrayFilters: [{ \"elem.sessionId\": sessionId }], new: true }\n    );\n\n    if (!result) {\n      return res.status(404).json({ message: \"Session not found\" });\n    }\n\n    res.json({ success: true, message: \"Session revoked successfully\" });\n  } catch (err) {\n    console.error(\"Revoke session error:\", err);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n}\n\n// DELETE /api/sessions - Revoke all sessions except current one\nexport async function revokeAllSessions(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const currentSessionId = (req as any).sessionId;\n\n    await User.findByIdAndUpdate(\n      userId,\n      { $set: { \"sessions.$[elem].isActive\": false } },\n      { arrayFilters: [{ \"elem.sessionId\": { $ne: currentSessionId } }] }\n    );\n\n    res.json({ success: true, message: \"All other sessions revoked successfully\" });\n  } catch (err) {\n    console.error(\"Revoke all sessions error:\", err);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n}\n\n// POST /api/sessions/refresh - Update session activity\nexport async function refreshSession(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const sessionId = (req as any).sessionId;\n\n    await User.findByIdAndUpdate(\n      userId,\n      { $set: { \"sessions.$[elem].lastActivity\": new Date() } },\n      { arrayFilters: [{ \"elem.sessionId\": sessionId }] }\n    );\n\n    res.json({ success: true, message: \"Session refreshed\" });\n  } catch (err) {\n    console.error(\"Refresh session error:\", err);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n}\n\n// Role-based middleware\nexport function requireRole(roles: string[]) {\n  return async (req: Request, res: Response, next: Function) => {\n    try {\n      const userId = (req as any).userId;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const user = await User.findById(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      if (!roles.includes(user.role)) {\n        return res.status(403).json({ \n          message: \"Access denied. Insufficient permissions.\",\n          requiredRole: roles,\n          userRole: user.role \n        });\n      }\n      \n      // Add user info to request for use in route handlers\n      (req as any).user = user;\n      next();\n    } catch (err) {\n      console.error(\"Role check error:\", err);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  };\n}\n\n// Convenience middleware functions\nexport const requireAdmin = requireRole(['admin']);\nexport const requireLibrarian = requireRole(['admin', 'librarian']);\nexport const requireUser = requireRole(['admin', 'librarian', 'user']);\n\n// Configure multer for file uploads\nconst storage = multer.memoryStorage();\nconst upload = multer({\n  storage: storage,\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Accept only image files\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed'));\n    }\n  },\n});\n\n// POST /api/profile/picture - Upload profile picture\nexport async function uploadProfilePicture(req: Request, res: Response) {\n  try {\n    const user = (req as any).user;\n    if (!user) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    // Use multer middleware\n    upload.single('profilePicture')(req, res, async (err) => {\n      if (err) {\n        return res.status(400).json({ message: err.message });\n      }\n\n      const file = (req as any).file;\n      if (!file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      // Update user profile picture\n      await User.findByIdAndUpdate(user.id, {\n        profilePicture: {\n          data: file.buffer,\n          contentType: file.mimetype,\n          fileName: file.originalname,\n          uploadDate: new Date()\n        }\n      });\n\n      res.json({ \n        success: true, \n        message: \"Profile picture uploaded successfully\" \n      });\n    });\n  } catch (error) {\n    console.error(\"Upload profile picture error:\", error);\n    res.status(500).json({ message: \"Failed to upload profile picture\" });\n  }\n}\n\n// GET /api/profile/picture/:userId - Get profile picture\nexport async function getProfilePicture(req: Request, res: Response) {\n  try {\n    const { userId } = req.params;\n    const user = await User.findById(userId).select('profilePicture');\n    \n    if (!user || !user.profilePicture || !user.profilePicture.data) {\n      return res.status(404).json({ message: \"Profile picture not found\" });\n    }\n\n    res.set('Content-Type', user.profilePicture.contentType);\n    res.set('Content-Disposition', `inline; filename=\"${user.profilePicture.fileName}\"`);\n    res.send(user.profilePicture.data);\n  } catch (error) {\n    console.error(\"Get profile picture error:\", error);\n    res.status(500).json({ message: \"Failed to get profile picture\" });\n  }\n}\n\n// DELETE /api/profile/picture - Remove profile picture\nexport async function removeProfilePicture(req: Request, res: Response) {\n  try {\n    const user = (req as any).user;\n    if (!user) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    await User.findByIdAndUpdate(user.id, {\n      $unset: { profilePicture: 1 }\n    });\n\n    res.json({ \n      success: true, \n      message: \"Profile picture removed successfully\" \n    });\n  } catch (error) {\n    console.error(\"Remove profile picture error:\", error);\n    res.status(500).json({ message: \"Failed to remove profile picture\" });\n  }\n}\n\n// Export User model for use in profile endpoints\nexport { User, verifyTokenWithSession }; \n\n// Google OAuth endpoints\nimport express from \"express\";\nconst router = express.Router();\n\nrouter.get(\"/google\",\n  passport.authenticate(\"google\", { scope: [\"profile\", \"email\"] })\n);\n\nrouter.get(\"/google/callback\",\n  passport.authenticate(\"google\", { session: false, failureRedirect: \"/\" }),\n  (req, res) => {\n    // Issue JWT and redirect to frontend with token\n    const user = (req as any).user;\n    const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: \"7d\" });\n    // Redirect to frontend with token as query param\n    res.redirect(`http://localhost:5173/login?token=${token}`);\n  }\n); \n\nexport { router }; ","import { Request, Response } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport { User, verifyTokenWithSession } from \"./auth\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"dev_secret\";\n\n// Middleware to verify JWT token\nfunction verifyToken(req: Request, res: Response, next: Function) {\n  const auth = req.headers.authorization;\n  if (!auth || !auth.startsWith(\"Bearer \")) {\n    return res.status(401).json({ message: \"Missing or invalid token\" });\n  }\n  const token = auth.split(\" \")[1];\n  try {\n    const payload = jwt.verify(token, JWT_SECRET) as { userId: string };\n    (req as any).userId = payload.userId;\n    next();\n  } catch (err) {\n    return res.status(401).json({ message: \"Invalid or expired token\" });\n  }\n}\n\n// Helper function to update session activity\nasync function updateSessionActivity(userId: string, sessionId: string) {\n  try {\n    await User.findByIdAndUpdate(\n      userId,\n      { $set: { \"sessions.$[elem].lastActivity\": new Date() } },\n      { arrayFilters: [{ \"elem.sessionId\": sessionId }] }\n    );\n  } catch (err) {\n    console.error(\"Session activity update error:\", err);\n  }\n}\n\n// GET /api/profile\nexport async function getProfile(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const sessionId = (req as any).sessionId;\n    \n    const user = await User.findById(userId).lean();\n    if (!user) return res.status(404).json({ message: \"User not found\" });\n    \n    // Update session activity\n    await updateSessionActivity(userId, sessionId);\n    \n    res.json({ \n      id: user._id, \n      name: user.name, \n      email: user.email, \n      role: user.role,\n      userId: user.userId,\n      department: user.department,\n      preferences: user.preferences,\n      profilePicture: user.profilePicture\n    });\n  } catch (err) {\n    console.error(\"Get profile error:\", err);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n}\n\n// PUT /api/profile\nexport async function updateProfile(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const sessionId = (req as any).sessionId;\n    const { name, email, preferences } = req.body;\n    \n    // Validate input\n    if (!name || !email) {\n      return res.status(400).json({ message: \"Name and email are required\" });\n    }\n    \n    // Check if email is already taken by another user\n    const existingUser = await User.findOne({ \n      email, \n      _id: { $ne: userId } \n    });\n    if (existingUser) {\n      return res.status(400).json({ message: \"Email already in use\" });\n    }\n    \n    // Update user profile\n    const updatedUser = await User.findByIdAndUpdate(\n      userId,\n      { \n        name, \n        email, \n        preferences: preferences || {} \n      },\n      { new: true }\n    ).lean();\n    \n    if (!updatedUser) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n    \n    // Update session activity\n    await updateSessionActivity(userId, sessionId);\n    \n    res.json({ \n      success: true, \n      message: \"Profile updated successfully\",\n      user: {\n        id: updatedUser._id,\n        name: updatedUser.name,\n        email: updatedUser.email,\n        preferences: updatedUser.preferences\n      }\n    });\n  } catch (err) {\n    console.error(\"Profile update error:\", err);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n}\n\n// POST /api/profile/change-password\nexport async function changePassword(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const sessionId = (req as any).sessionId;\n    const { currentPassword, newPassword } = req.body;\n    \n    // Validate input\n    if (!currentPassword || !newPassword) {\n      return res.status(400).json({ message: \"Current password and new password are required\" });\n    }\n    \n    if (newPassword.length < 6) {\n      return res.status(400).json({ message: \"New password must be at least 6 characters long\" });\n    }\n    \n    // Find user and verify current password\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n    \n    const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.passwordHash);\n    if (!isCurrentPasswordValid) {\n      return res.status(400).json({ message: \"Current password is incorrect\" });\n    }\n    \n    // Hash new password and update\n    const newPasswordHash = await bcrypt.hash(newPassword, 10);\n    await User.findByIdAndUpdate(userId, { passwordHash: newPasswordHash });\n    \n    // Update session activity\n    await updateSessionActivity(userId, sessionId);\n    \n    res.json({ \n      success: true, \n      message: \"Password changed successfully\" \n    });\n  } catch (err) {\n    console.error(\"Password change error:\", err);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n}\n\n// DELETE /api/profile\nexport async function deleteProfile(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const sessionId = (req as any).sessionId;\n    const { password } = req.body;\n    \n    // Validate input\n    if (!password) {\n      return res.status(400).json({ message: \"Password is required to delete account\" });\n    }\n    \n    // Find user and verify password\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n    \n    const isPasswordValid = await bcrypt.compare(password, user.passwordHash);\n    if (!isPasswordValid) {\n      return res.status(400).json({ message: \"Password is incorrect\" });\n    }\n    \n    // Delete user account\n    await User.findByIdAndDelete(userId);\n    \n    res.json({ \n      success: true, \n      message: \"Account deleted successfully\" \n    });\n  } catch (err) {\n    console.error(\"Account deletion error:\", err);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n} ","import { Request, Response } from \"express\";\nimport { User, requireAdmin } from \"./auth\";\nimport mongoose from \"mongoose\";\n\n// Book schema for admin management\nconst bookSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  author: { type: String, required: true },\n  isbn: { type: String, unique: true, required: true },\n  publisher: { type: String, required: true },\n  publishedYear: { type: Number, required: true },\n  genre: { type: String, required: true },\n  categories: [String],\n  description: String,\n  coverImage: String,\n  totalCopies: { type: Number, default: 1, required: true },\n  availableCopies: { type: Number, default: 1 },\n  location: { type: String, required: true }, // e.g., \"Shelf A3, Section B\"\n  language: { type: String, default: \"English\" },\n  pages: Number,\n  hasDownload: { type: Boolean, default: false },\n  hasReadOnline: { type: Boolean, default: false },\n  addedDate: { type: Date, default: Date.now },\n  lastUpdated: { type: Date, default: Date.now }\n}, { timestamps: true });\n\nexport const Book = mongoose.model(\"Book\", bookSchema, \"books\");\n\n// GET /api/admin/stats - Get dashboard statistics\nexport async function getAdminStats(req: Request, res: Response) {\n  try {\n    const user = (req as any).user;\n    if (user.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    // Get user statistics\n    const totalUsers = await User.countDocuments();\n    const totalBooks = await Book.countDocuments();\n    const newUsersToday = await User.countDocuments({\n      createdAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }\n    });\n    const booksAddedThisMonth = await Book.countDocuments({\n      addedDate: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) }\n    });\n\n    // Get real loan and reservation data\n    const { Loan, Reservation } = require('./librarian');\n    const activeLoans = await Loan.countDocuments({ status: 'active' });\n    const pendingReservations = await Reservation.countDocuments({ status: 'pending' });\n\n    const stats = {\n      totalUsers,\n      totalBooks,\n      activeLoans,\n      pendingReservations,\n      newUsersToday,\n      booksAddedThisMonth,\n      systemStatus: 'healthy' as const\n    };\n\n    res.json(stats);\n  } catch (error) {\n    console.error('Admin stats error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/admin/users - Get all users for admin management\nexport async function getUsers(req: Request, res: Response) {\n  try {\n    const user = (req as any).user;\n    if (user.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const skip = (page - 1) * limit;\n\n    const users = await User.find()\n      .select('-passwordHash -resetToken -resetTokenExpiry -sessions')\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(limit);\n\n    const total = await User.countDocuments();\n\n    // Import Loan and Fine models to get student statistics\n    const { Loan, Fine, Reservation } = require('./librarian');\n\n    const usersWithDetails = await Promise.all(\n      users.map(async (user) => {\n        let additionalInfo = {};\n        \n        // For students (users), get borrowing statistics\n        if (user.role === 'user') {\n          const currentLoans = await Loan.countDocuments({ \n            userId: user._id, \n            status: 'active' \n          });\n          \n          const totalBorrowed = await Loan.countDocuments({ \n            userId: user._id \n          });\n          \n          const outstandingFines = await Fine.aggregate([\n            { $match: { userId: user._id, status: 'pending' } },\n            { $group: { _id: null, total: { $sum: '$amount' } } }\n          ]);\n          \n          const reservations = await Reservation.countDocuments({\n            userId: user._id,\n            status: { $in: ['pending', 'ready'] }\n          });\n          \n          additionalInfo = {\n            currentBorrowedBooks: currentLoans,\n            totalBooksBorrowed: totalBorrowed,\n            outstandingFines: outstandingFines[0]?.total || 0,\n            numberOfReservations: reservations\n          };\n        }\n        \n        return {\n          id: user._id,\n          name: user.name,\n          email: user.email,\n          role: user.role,\n          userId: user.userId || `${user.role.toUpperCase()}-${user._id.toString().slice(-6)}`,\n          contactNumber: user.contactNumber || '+1-555-0123',\n          department: user.department || (user.role === 'user' ? 'Computer Science - Year 3' : \n                      user.role === 'librarian' ? 'Reference Section' : 'Administration'),\n          createdAt: user.createdAt,\n          lastLogin: user.lastLogin,\n          accountStatus: user.accountStatus || 'active',\n          profilePicture: user.profilePicture,\n          ...additionalInfo\n        };\n      })\n    );\n\n    res.json({\n      users: usersWithDetails,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n  } catch (error) {\n    console.error('Get users error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/admin/users - Create a new user\nexport async function createUser(req: Request, res: Response) {\n  try {\n    const user = (req as any).user;\n    if (user.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    const { name, email, password, role, department } = req.body;\n\n    if (!name || !email || !password) {\n      return res.status(400).json({ message: \"Name, email, and password are required\" });\n    }\n\n    if (!['admin', 'librarian', 'user'].includes(role)) {\n      return res.status(400).json({ message: \"Invalid role\" });\n    }\n\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return res.status(400).json({ message: \"User with this email already exists\" });\n    }\n\n    // Import the generateUserId function from auth\n    const { generateUserId } = require('./auth');\n    \n    // Generate user ID based on role\n    const userId = await generateUserId(role, department);\n    \n    const bcrypt = require('bcryptjs');\n    const passwordHash = await bcrypt.hash(password, 10);\n\n    const newUser = await User.create({\n      name,\n      email,\n      passwordHash,\n      role,\n      userId,\n      department: department || (role === 'user' ? 'Computer Science' : 'General')\n    });\n\n    res.status(201).json({\n      message: \"User created successfully\",\n      user: {\n        id: newUser._id,\n        name: newUser.name,\n        email: newUser.email,\n        role: newUser.role,\n        userId: newUser.userId,\n        department: newUser.department,\n        createdAt: newUser.createdAt\n      }\n    });\n  } catch (error) {\n    console.error('Create user error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// PUT /api/admin/users/:id - Update a user\nexport async function updateUser(req: Request, res: Response) {\n  try {\n    const adminUser = (req as any).user;\n    if (adminUser.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    const { id } = req.params;\n    const { name, email, role, userId, department } = req.body;\n\n    if (!['admin', 'librarian', 'user'].includes(role)) {\n      return res.status(400).json({ message: \"Invalid role\" });\n    }\n\n    const user = await User.findById(id);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    // Prevent admins from editing other admins\n    if (user.role === 'admin' && adminUser._id.toString() !== user._id.toString()) {\n      return res.status(403).json({ message: \"Admins cannot edit other admins' profiles.\" });\n    }\n\n    // Check if email is already taken by another user\n    if (email !== user.email) {\n      const existingUser = await User.findOne({ email });\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email is already taken\" });\n      }\n    }\n\n    // Prevent changing user ID - it's used throughout the system\n    if (userId && userId !== user.userId) {\n      return res.status(400).json({ \n        message: \"User ID cannot be modified. It is used throughout the system for tracking loans, fines, and reservations. For major corrections, consider creating a new account.\" \n      });\n    }\n\n    const updatedUser = await User.findByIdAndUpdate(\n      id,\n      { name, email, role, userId, department },\n      { new: true }\n    ).select('-passwordHash -resetToken -resetTokenExpiry -sessions');\n\n    res.json({\n      message: \"User updated successfully\",\n      user: {\n        id: updatedUser._id,\n        name: updatedUser.name,\n        email: updatedUser.email,\n        role: updatedUser.role,\n        userId: updatedUser.userId,\n        department: updatedUser.department,\n        createdAt: updatedUser.createdAt,\n        lastLogin: updatedUser.lastLogin\n      }\n    });\n  } catch (error) {\n    console.error('Update user error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// DELETE /api/admin/users/:id - Delete a user\nexport async function deleteUser(req: Request, res: Response) {\n  try {\n    const adminUser = (req as any).user;\n    if (adminUser.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    const { id } = req.params;\n\n    // Prevent admins from deleting themselves\n    if (adminUser._id.toString() === id) {\n      return res.status(400).json({ message: \"Cannot delete your own account\" });\n    }\n\n    const user = await User.findById(id);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    // Import Loan, Reservation, Fine models\n    const { Loan, Reservation, Fine } = require('./librarian');\n\n    // Check for active loans\n    const activeLoans = await Loan.countDocuments({ userId: id, status: 'active' });\n    // Check for active reservations\n    const activeReservations = await Reservation.countDocuments({ userId: id, status: { $in: ['pending', 'ready'] } });\n    // Check for unpaid fines\n    const unpaidFines = await Fine.countDocuments({ userId: id, status: { $in: ['pending', 'partial'] } });\n\n    if (activeLoans > 0 || activeReservations > 0 || unpaidFines > 0) {\n      let issues = [];\n      if (activeLoans > 0) issues.push(`${activeLoans} active loan(s)`);\n      if (activeReservations > 0) issues.push(`${activeReservations} active reservation(s)`);\n      if (unpaidFines > 0) issues.push(`${unpaidFines} unpaid fine(s)`);\n      return res.status(400).json({ message: `Cannot delete user. Please resolve: ${issues.join(', ')}.` });\n    }\n\n    await User.findByIdAndDelete(id);\n\n    res.json({ message: \"User deleted successfully\" });\n  } catch (error) {\n    console.error('Delete user error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/admin/books - Get all books for admin management\nexport async function getBooks(req: Request, res: Response) {\n  try {\n    const user = (req as any).user;\n    if (user.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const skip = (page - 1) * limit;\n\n    const books = await Book.find()\n      .sort({ addedDate: -1 })\n      .skip(skip)\n      .limit(limit);\n\n    const total = await Book.countDocuments();\n\n    const booksWithStatus = books.map(book => ({\n      id: book._id,\n      title: book.title,\n      author: book.author,\n      isbn: book.isbn,\n      genre: book.genre,\n      publisher: book.publisher,\n      publishedYear: book.publishedYear,\n      description: book.description,\n      coverImage: book.coverImage,\n      totalCopies: book.totalCopies,\n      availableCopies: book.availableCopies,\n      location: book.location,\n      language: book.language,\n      pages: book.pages,\n      hasDownload: book.hasDownload,\n      hasReadOnline: book.hasReadOnline,\n      categories: book.categories,\n      addedDate: book.addedDate,\n      status: book.availableCopies === 0 ? 'out-of-stock' : \n              book.availableCopies <= 2 ? 'low-stock' : 'available'\n    }));\n\n    res.json({\n      books: booksWithStatus,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n  } catch (error) {\n    console.error('Get books error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/admin/books - Create a new book\nexport async function createBook(req: Request, res: Response) {\n  try {\n    const user = (req as any).user;\n    if (user.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    const {\n      title,\n      author,\n      isbn,\n      genre,\n      publishedYear,\n      publisher,\n      description,\n      coverImage,\n      totalCopies,\n      categories,\n      language,\n      pages,\n      hasDownload,\n      hasReadOnline,\n      location\n    } = req.body;\n\n    if (!title || !author || !isbn || !publisher || !publishedYear || !genre || !location) {\n      return res.status(400).json({ \n        message: \"Title, author, ISBN, publisher, publication year, genre, and location are required\" \n      });\n    }\n\n    const existingBook = await Book.findOne({ isbn });\n    if (existingBook) {\n      return res.status(400).json({ message: \"Book with this ISBN already exists\" });\n    }\n\n    const newBook = await Book.create({\n      title,\n      author,\n      isbn,\n      genre,\n      publishedYear,\n      publisher,\n      description,\n      coverImage,\n      totalCopies: totalCopies || 1,\n      availableCopies: totalCopies || 1,\n      categories: categories || [],\n      language: language || \"English\",\n      pages,\n      hasDownload: hasDownload || false,\n      hasReadOnline: hasReadOnline || false,\n      location\n    });\n\n    res.status(201).json({\n      message: \"Book created successfully\",\n      book: {\n        id: newBook._id,\n        title: newBook.title,\n        author: newBook.author,\n        isbn: newBook.isbn,\n        genre: newBook.genre,\n        publisher: newBook.publisher,\n        publishedYear: newBook.publishedYear,\n        description: newBook.description,\n        coverImage: newBook.coverImage,\n        totalCopies: newBook.totalCopies,\n        availableCopies: newBook.availableCopies,\n        location: newBook.location,\n        language: newBook.language,\n        pages: newBook.pages,\n        hasDownload: newBook.hasDownload,\n        hasReadOnline: newBook.hasReadOnline,\n        categories: newBook.categories,\n        addedDate: newBook.addedDate\n      }\n    });\n  } catch (error) {\n    console.error('Create book error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// PUT /api/admin/books/:id - Update a book\nexport async function updateBook(req: Request, res: Response) {\n  try {\n    const user = (req as any).user;\n    if (user.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    const { id } = req.params;\n    const updateData = req.body;\n\n    const book = await Book.findById(id);\n    if (!book) {\n      return res.status(404).json({ message: \"Book not found\" });\n    }\n\n    // Check if ISBN is being changed and already exists\n    if (updateData.isbn && updateData.isbn !== book.isbn) {\n      const existingBook = await Book.findOne({ isbn: updateData.isbn });\n      if (existingBook) {\n        return res.status(400).json({ message: \"ISBN is already taken\" });\n      }\n    }\n\n    // Import Reservation model\n    const { Reservation } = require('./librarian');\n\n    // Check if total copies are being reduced\n    if (updateData.totalCopies !== undefined && updateData.totalCopies < book.totalCopies) {\n      const reduction = book.totalCopies - updateData.totalCopies;\n      \n      // Check if reduction would make available copies negative\n      if (book.availableCopies - reduction < 0) {\n        return res.status(400).json({ \n          message: `Cannot reduce total copies to ${updateData.totalCopies}. There are ${book.availableCopies} available copies and ${book.totalCopies - book.availableCopies} on loan.`\n        });\n      }\n\n      // Check for pending reservations that might be affected\n      const pendingReservations = await Reservation.countDocuments({\n        bookId: id,\n        status: 'pending'\n      });\n\n      if (pendingReservations > 0) {\n        return res.status(400).json({ \n          message: `Cannot reduce copies. There are ${pendingReservations} pending reservation(s) for this book. Please handle reservations first.`\n        });\n      }\n\n      // Update available copies accordingly\n      updateData.availableCopies = Math.max(0, book.availableCopies - reduction);\n    }\n\n    const updatedBook = await Book.findByIdAndUpdate(\n      id,\n      { ...updateData, lastUpdated: new Date() },\n      { new: true }\n    );\n\n    res.json({\n      message: \"Book updated successfully\",\n      book: {\n        id: updatedBook._id,\n        title: updatedBook.title,\n        author: updatedBook.author,\n        isbn: updatedBook.isbn,\n        genre: updatedBook.genre,\n        publisher: updatedBook.publisher,\n        publishedYear: updatedBook.publishedYear,\n        description: updatedBook.description,\n        coverImage: updatedBook.coverImage,\n        totalCopies: updatedBook.totalCopies,\n        availableCopies: updatedBook.availableCopies,\n        location: updatedBook.location,\n        language: updatedBook.language,\n        pages: updatedBook.pages,\n        hasDownload: updatedBook.hasDownload,\n        hasReadOnline: updatedBook.hasReadOnline,\n        categories: updatedBook.categories,\n        addedDate: updatedBook.addedDate,\n        lastUpdated: updatedBook.lastUpdated\n      }\n    });\n  } catch (error) {\n    console.error('Update book error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// DELETE /api/admin/books/:id - Delete a book\nexport async function deleteBook(req: Request, res: Response) {\n  try {\n    const user = (req as any).user;\n    if (user.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    const { id } = req.params;\n\n    const book = await Book.findById(id);\n    if (!book) {\n      return res.status(404).json({ message: \"Book not found\" });\n    }\n\n    // Import Reservation and Loan models\n    const { Reservation, Loan } = require('./librarian');\n\n    // Check for active reservations\n    const activeReservations = await Reservation.find({\n      bookId: id,\n      status: { $in: ['pending', 'ready'] }\n    }).populate('userId', 'name email');\n\n    // Check for active loans\n    const activeLoans = await Loan.countDocuments({ bookId: id, status: 'active' });\n\n    if (activeReservations.length > 0 || activeLoans > 0) {\n      let issues = [];\n      if (activeReservations.length > 0) issues.push(`${activeReservations.length} active reservation(s)`);\n      if (activeLoans > 0) issues.push(`${activeLoans} active loan(s)`);\n      return res.status(400).json({ \n        message: `Cannot delete book. Please resolve: ${issues.join(', ')}.`,\n        reservations: activeReservations\n      });\n    }\n\n    // Cancel any remaining reservations (expired, cancelled, etc.)\n    await Reservation.updateMany(\n      { bookId: id },\n      { \n        status: 'cancelled',\n        notes: 'Book deleted from library'\n      }\n    );\n\n    // Delete the book\n    await Book.findByIdAndDelete(id);\n\n    res.json({ \n      message: \"Book deleted successfully\",\n      cancelledReservations: activeReservations.length\n    });\n  } catch (error) {\n    console.error('Delete book error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n} ","import { Request, Response } from \"express\";\nimport { User, requireLibrarian } from \"./auth\";\nimport { Book } from \"./admin\";\nimport mongoose from \"mongoose\";\n\n// Loan Schema\nconst loanSchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  bookId: { type: mongoose.Schema.Types.ObjectId, ref: 'Book', required: true },\n  issuedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true }, // Librarian who issued\n  issueDate: { type: Date, default: Date.now },\n  dueDate: { type: Date, required: true },\n  returnDate: { type: Date },\n  renewalCount: { type: Number, default: 0 },\n  maxRenewals: { type: Number, default: 2 },\n  status: { \n    type: String, \n    enum: ['active', 'returned', 'overdue', 'lost', 'damaged'], \n    default: 'active' \n  },\n  fineAmount: { type: Number, default: 0 },\n  finePaid: { type: Boolean, default: false },\n  notes: String\n}, { timestamps: true });\n\n// Reservation Schema\nconst reservationSchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  bookId: { type: mongoose.Schema.Types.ObjectId, ref: 'Book', required: true },\n  requestDate: { type: Date, default: Date.now },\n  status: { \n    type: String, \n    enum: ['pending', 'ready', 'fulfilled', 'cancelled', 'expired'], \n    default: 'pending' \n  },\n  priority: { type: Number, default: 1 },\n  notificationSent: { type: Boolean, default: false },\n  expiryDate: Date,\n  notes: String\n}, { timestamps: true });\n\n// Fine Schema\nconst fineSchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  loanId: { type: mongoose.Schema.Types.ObjectId, ref: 'Loan' },\n  amount: { type: Number, required: true },\n  reason: { \n    type: String, \n    enum: ['overdue', 'damage', 'lost', 'replacement', 'other'], \n    required: true \n  },\n  description: String,\n  dateIssued: { type: Date, default: Date.now },\n  datePaid: Date,\n  paidAmount: { type: Number, default: 0 },\n  waived: { type: Boolean, default: false },\n  waivedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  waivedReason: String,\n  status: { \n    type: String, \n    enum: ['pending', 'paid', 'partial', 'waived', 'cancelled'], \n    default: 'pending' \n  }\n}, { timestamps: true });\n\n// Notification Schema\nconst notificationSchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  type: { \n    type: String, \n    enum: ['overdue', 'reservation_ready', 'fine', 'general', 'book_reminder'], \n    required: true \n  },\n  title: { type: String, required: true },\n  message: { type: String, required: true },\n  sent: { type: Boolean, default: false },\n  sentDate: Date,\n  read: { type: Boolean, default: false },\n  readDate: Date,\n  relatedLoanId: { type: mongoose.Schema.Types.ObjectId, ref: 'Loan' },\n  relatedReservationId: { type: mongoose.Schema.Types.ObjectId, ref: 'Reservation' },\n  relatedFineId: { type: mongoose.Schema.Types.ObjectId, ref: 'Fine' }\n}, { timestamps: true });\n\n// Inventory Audit Schema\nconst inventoryAuditSchema = new mongoose.Schema({\n  bookId: { type: mongoose.Schema.Types.ObjectId, ref: 'Book', required: true },\n  auditedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  auditDate: { type: Date, default: Date.now },\n  expectedCount: { type: Number, required: true },\n  actualCount: { type: Number, required: true },\n  discrepancy: { type: Number, required: true },\n  status: { \n    type: String, \n    enum: ['match', 'shortage', 'surplus', 'damaged', 'missing'], \n    required: true \n  },\n  notes: String,\n  resolved: { type: Boolean, default: false },\n  resolvedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  resolvedDate: Date\n}, { timestamps: true });\n\nconst Loan = mongoose.model(\"Loan\", loanSchema);\nconst Reservation = mongoose.model(\"Reservation\", reservationSchema);\nconst Fine = mongoose.model(\"Fine\", fineSchema);\nconst Notification = mongoose.model(\"Notification\", notificationSchema);\nconst InventoryAudit = mongoose.model(\"InventoryAudit\", inventoryAuditSchema);\n\n// Helper function to calculate due date (default 14 days)\nfunction calculateDueDate(days: number = 14): Date {\n  const date = new Date();\n  date.setDate(date.getDate() + days);\n  return date;\n}\n\n// Helper function to calculate overdue fine\nfunction calculateOverdueFine(dueDate: Date, returnDate: Date = new Date()): number {\n  const msPerDay = 24 * 60 * 60 * 1000;\n  const overdueDays = Math.ceil((returnDate.getTime() - dueDate.getTime()) / msPerDay);\n  return overdueDays > 0 ? overdueDays * 0.50 : 0; // $0.50 per day\n}\n\n// Helper function to handle reservation cleanup when book availability changes\nasync function handleReservationCleanup(bookId: string, bookTitle: string, reason: string) {\n  try {\n    // Find all pending reservations for this book\n    const pendingReservations = await Reservation.find({\n      bookId,\n      status: 'pending'\n    }).populate('userId', 'name email');\n\n    // Cancel all pending reservations\n    for (const reservation of pendingReservations) {\n      reservation.status = 'cancelled';\n      reservation.notes = reason;\n      await reservation.save();\n\n      // Create notification for user\n      await Notification.create({\n        userId: reservation.userId._id,\n        type: 'general',\n        title: 'Reservation Cancelled',\n        message: `Your reservation for \"${bookTitle}\" has been cancelled: ${reason}`,\n        relatedReservationId: reservation._id\n      });\n    }\n\n    return pendingReservations.length;\n  } catch (error) {\n    console.error('Error handling reservation cleanup:', error);\n    return 0;\n  }\n}\n\n// GET /api/librarian/dashboard - Get librarian dashboard stats\nexport async function getLibrarianDashboard(req: Request, res: Response) {\n  try {\n    const user = (req as any).user;\n    \n    // Get dashboard statistics\n    const totalBooks = await Book.countDocuments();\n    const totalLoans = await Loan.countDocuments({ status: 'active' });\n    const overdueLoans = await Loan.countDocuments({ \n      status: 'active',\n      dueDate: { $lt: new Date() }\n    });\n    const pendingReservations = await Reservation.countDocuments({ status: 'pending' });\n    const totalFines = await Fine.aggregate([\n      { $match: { status: 'pending' } },\n      { $group: { _id: null, total: { $sum: '$amount' } } }\n    ]);\n    \n    const stats = {\n      totalBooks,\n      totalLoans,\n      overdueLoans,\n      pendingReservations,\n      totalFines: totalFines[0]?.total || 0,\n      systemStatus: 'healthy' as const\n    };\n\n    res.json(stats);\n  } catch (error) {\n    console.error('Librarian dashboard error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/librarian/books - Get books for librarian management\nexport async function getLibrarianBooks(req: Request, res: Response) {\n  try {\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const search = req.query.search as string;\n    const skip = (page - 1) * limit;\n\n    let query = {};\n    if (search) {\n      query = {\n        $or: [\n          { title: { $regex: search, $options: 'i' } },\n          { author: { $regex: search, $options: 'i' } },\n          { isbn: { $regex: search, $options: 'i' } }\n        ]\n      };\n    }\n\n    const books = await Book.find(query)\n      .sort({ title: 1 })\n      .skip(skip)\n      .limit(limit);\n\n    const total = await Book.countDocuments(query);\n\n    const booksWithLoanInfo = await Promise.all(\n      books.map(async (book) => {\n        const activeLoans = await Loan.countDocuments({ \n          bookId: book._id, \n          status: 'active' \n        });\n        \n        return {\n          id: book._id,\n          title: book.title,\n          author: book.author,\n          isbn: book.isbn,\n          genre: book.genre,\n          publisher: book.publisher,\n          publishedYear: book.publishedYear,\n          description: book.description,\n          coverImage: book.coverImage,\n          totalCopies: book.totalCopies,\n          availableCopies: book.availableCopies,\n          currentLoans: activeLoans,\n          location: book.location,\n          language: book.language,\n          pages: book.pages,\n          hasDownload: book.hasDownload,\n          hasReadOnline: book.hasReadOnline,\n          categories: book.categories,\n          addedDate: book.addedDate,\n          status: book.availableCopies === 0 ? 'out-of-stock' : \n                  book.availableCopies <= 2 ? 'low-stock' : 'available'\n        };\n      })\n    );\n\n    res.json({\n      books: booksWithLoanInfo,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n  } catch (error) {\n    console.error('Get librarian books error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/librarian/loans/issue - Issue a book to a user\nexport async function issueBook(req: Request, res: Response) {\n  try {\n    const librarian = (req as any).user;\n    const { userId, bookId, loanDays = 14 } = req.body;\n\n    if (!userId || !bookId) {\n      return res.status(400).json({ message: 'User ID and Book ID are required' });\n    }\n\n    // Find user by userId (custom ID), email, or MongoDB ObjectId\n    let user;\n    if (mongoose.Types.ObjectId.isValid(userId)) {\n      user = await User.findById(userId);\n    } else {\n      user = await User.findOne({ \n        $or: [\n          { userId: userId },\n          { email: userId }\n        ]\n      });\n    }\n    \n    if (!user) {\n      return res.status(404).json({ message: 'User not found. Please check the Student ID.' });\n    }\n\n    // Find book by ISBN, title, or MongoDB ObjectId\n    let book;\n    if (mongoose.Types.ObjectId.isValid(bookId)) {\n      book = await Book.findById(bookId);\n    } else {\n      book = await Book.findOne({ \n        $or: [\n          { isbn: bookId },\n          { title: { $regex: bookId, $options: 'i' } }\n        ]\n      });\n    }\n    \n    if (!book) {\n      return res.status(404).json({ message: 'Book not found. Please check the Book ID/ISBN.' });\n    }\n\n    if (book.availableCopies <= 0) {\n      return res.status(400).json({ message: 'Book is not available for loan' });\n    }\n\n    // Check if user already has this book\n    const existingLoan = await Loan.findOne({\n      userId: user._id,\n      bookId: book._id,\n      status: 'active'\n    });\n\n    if (existingLoan) {\n      return res.status(400).json({ message: 'User already has this book on loan' });\n    }\n\n    // Check user's borrowing limit\n    const currentLoans = await Loan.countDocuments({ \n      userId: user._id, \n      status: 'active' \n    });\n\n    const borrowingLimit = 5; // Standard limit for students\n    if (currentLoans >= borrowingLimit) {\n      return res.status(400).json({ \n        message: `User has reached their borrowing limit of ${borrowingLimit} books. Please return some books before borrowing more.` \n      });\n    }\n\n    // Check for outstanding fines\n    const outstandingFines = await Fine.aggregate([\n      { $match: { userId: user._id, status: 'pending' } },\n      { $group: { _id: null, total: { $sum: '$amount' } } }\n    ]);\n\n    const totalFines = outstandingFines[0]?.total || 0;\n    if (totalFines > 0) {\n      return res.status(400).json({ \n        message: `User has outstanding fines of $${totalFines.toFixed(2)}. Please pay fines before borrowing books.` \n      });\n    }\n\n    // Check for overdue books\n    const overdueBooks = await Loan.countDocuments({\n      userId: user._id,\n      status: 'active',\n      dueDate: { $lt: new Date() }\n    });\n\n    if (overdueBooks > 0) {\n      return res.status(400).json({ \n        message: `User has ${overdueBooks} overdue book(s). Please return overdue books before borrowing new ones.` \n      });\n    }\n\n    // Create loan record\n    const loan = await Loan.create({\n      userId: user._id,\n      bookId: book._id,\n      issuedBy: librarian._id,\n      dueDate: calculateDueDate(loanDays)\n    });\n\n    // Update book availability\n    await Book.findByIdAndUpdate(book._id, {\n      $inc: { availableCopies: -1 }\n    });\n\n    // Populate loan with user and book details\n    const populatedLoan = await Loan.findById(loan._id)\n      .populate('userId', 'name email userId')\n      .populate('bookId', 'title author isbn');\n\n    res.status(201).json({\n      message: 'Book issued successfully',\n      loan: populatedLoan\n    });\n  } catch (error) {\n    console.error('Issue book error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/librarian/loans/return - Return a book\nexport async function returnBook(req: Request, res: Response) {\n  try {\n    const { loanId, condition = 'good', notes } = req.body;\n\n    if (!loanId) {\n      return res.status(400).json({ message: 'Loan ID is required' });\n    }\n\n    const loan = await Loan.findById(loanId)\n      .populate('userId', 'name email')\n      .populate('bookId', 'title author');\n\n    if (!loan) {\n      return res.status(404).json({ message: 'Loan not found' });\n    }\n\n    if (loan.status !== 'active') {\n      return res.status(400).json({ message: 'Book is not currently on loan' });\n    }\n\n    const returnDate = new Date();\n    let fine = 0;\n\n    // Calculate overdue fine if applicable\n    if (returnDate > loan.dueDate) {\n      fine = calculateOverdueFine(loan.dueDate, returnDate);\n    }\n\n    // Update loan record\n    loan.returnDate = returnDate;\n    loan.status = condition === 'damaged' ? 'damaged' : 'returned';\n    loan.fineAmount = fine;\n    if (notes) loan.notes = notes;\n    await loan.save();\n\n    // Update book availability\n    if (condition !== 'lost' && condition !== 'damaged') {\n      await Book.findByIdAndUpdate(loan.bookId, {\n        $inc: { availableCopies: 1 }\n      });\n    }\n\n    // Create fine record if applicable\n    if (fine > 0) {\n      await Fine.create({\n        userId: loan.userId,\n        loanId: loan._id,\n        amount: fine,\n        reason: 'overdue',\n        description: `Overdue fine for \"${(loan.bookId as any).title}\"`\n      });\n    }\n\n    res.json({\n      message: 'Book returned successfully',\n      loan,\n      fine: fine > 0 ? fine : null\n    });\n  } catch (error) {\n    console.error('Return book error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/librarian/loans - Get all loans\nexport async function getLoans(req: Request, res: Response) {\n  try {\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const status = req.query.status as string;\n    const skip = (page - 1) * limit;\n\n    let query = {};\n    if (status) {\n      query = { status };\n    }\n\n    const loans = await Loan.find(query)\n      .populate('userId', 'name email')\n      .populate('bookId', 'title author isbn')\n      .populate('issuedBy', 'name')\n      .sort({ issueDate: -1 })\n      .skip(skip)\n      .limit(limit);\n\n    const total = await Loan.countDocuments(query);\n\n    res.json({\n      loans,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n  } catch (error) {\n    console.error('Get loans error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/librarian/overdue - Get overdue books\nexport async function getOverdueBooks(req: Request, res: Response) {\n  try {\n    const overdueLoans = await Loan.find({\n      status: 'active',\n      dueDate: { $lt: new Date() }\n    })\n      .populate('userId', 'name email')\n      .populate('bookId', 'title author isbn')\n      .sort({ dueDate: 1 });\n\n    // Calculate overdue days and potential fines\n    const overdueWithFines = overdueLoans.map(loan => {\n      const overdueDays = Math.ceil((Date.now() - loan.dueDate.getTime()) / (24 * 60 * 60 * 1000));\n      const potentialFine = overdueDays * 0.50;\n      \n      return {\n        ...loan.toObject(),\n        overdueDays,\n        potentialFine\n      };\n    });\n\n    res.json(overdueWithFines);\n  } catch (error) {\n    console.error('Get overdue books error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/librarian/reservations - Get all reservations\nexport async function getReservations(req: Request, res: Response) {\n  try {\n    const status = req.query.status as string;\n    let query = {};\n    if (status) {\n      query = { status };\n    }\n\n    // Check for expired ready reservations and mark them as expired\n    const expiredReservations = await Reservation.find({\n      status: 'ready',\n      expiryDate: { $lt: new Date() }\n    });\n\n    for (const reservation of expiredReservations) {\n      reservation.status = 'expired';\n      reservation.notes = 'Reservation expired - not picked up within 7 days';\n      await reservation.save();\n\n      // Create notification for user\n      await Notification.create({\n        userId: reservation.userId,\n        type: 'general',\n        title: 'Reservation Expired',\n        message: `Your reservation for \"${(reservation.bookId as any).title}\" has expired because it was not picked up within 7 days.`,\n        relatedReservationId: reservation._id\n      });\n    }\n\n    const reservations = await Reservation.find(query)\n      .populate('userId', 'name email')\n      .populate('bookId', 'title author isbn')\n      .sort({ requestDate: 1 });\n\n    res.json(reservations);\n  } catch (error) {\n    console.error('Get reservations error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/librarian/users/search - Search users\nexport async function searchUsers(req: Request, res: Response) {\n  try {\n    const { q } = req.query;\n    \n    if (!q) {\n      return res.status(400).json({ message: 'Search query is required' });\n    }\n\n    const users = await User.find({\n      $or: [\n        { name: { $regex: q, $options: 'i' } },\n        { email: { $regex: q, $options: 'i' } },\n        { userId: { $regex: q, $options: 'i' } }\n      ],\n      role: { $ne: 'admin' } // Don't show admin users\n    })\n      .select('name email userId role department createdAt lastLogin profilePicture')\n      .limit(20);\n\n    // Get loan info for each user\n    const usersWithLoans = await Promise.all(\n      users.map(async (user) => {\n        const activeLoans = await Loan.countDocuments({ \n          userId: user._id, \n          status: 'active' \n        });\n        const overdueLoans = await Loan.countDocuments({ \n          userId: user._id, \n          status: 'active',\n          dueDate: { $lt: new Date() }\n        });\n        const totalFines = await Fine.aggregate([\n          { $match: { userId: user._id, status: 'pending' } },\n          { $group: { _id: null, total: { $sum: '$amount' } } }\n        ]);\n\n        return {\n          ...user.toObject(),\n          activeLoans,\n          overdueLoans,\n          totalFines: totalFines[0]?.total || 0\n        };\n      })\n    );\n\n    res.json(usersWithLoans);\n  } catch (error) {\n    console.error('Search users error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/librarian/users/:id/loans - Get user's loan history\nexport async function getUserLoans(req: Request, res: Response) {\n  try {\n    const { id } = req.params;\n    \n    const loans = await Loan.find({ userId: id })\n      .populate('bookId', 'title author isbn')\n      .populate('issuedBy', 'name')\n      .sort({ issueDate: -1 });\n\n    res.json(loans);\n  } catch (error) {\n    console.error('Get user loans error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/librarian/users/:id/activity - Get user's full activity log\nexport async function getUserActivity(req: Request, res: Response) {\n  try {\n    const { id } = req.params;\n\n    // Fetch all loans for the user\n    const loans = await Loan.find({ userId: id })\n      .populate('bookId', 'title author isbn')\n      .populate('issuedBy', 'name')\n      .sort({ issueDate: -1 });\n\n    // Fetch all fines for the user\n    const fines = await Fine.find({ userId: id })\n      .populate('loanId', 'bookId issueDate returnDate')\n      .sort({ dateIssued: -1 });\n\n    // Fetch all reservations for the user\n    const reservations = await Reservation.find({ userId: id })\n      .populate('bookId', 'title author isbn')\n      .sort({ requestDate: -1 });\n\n    // Fetch all inventory audits performed by the user (if librarian)\n    const audits = await InventoryAudit.find({ auditedBy: id })\n      .populate('bookId', 'title author isbn')\n      .sort({ auditDate: -1 });\n\n    // Build activity log entries\n    const activity: any[] = [];\n\n    // Loans (borrowed/returned)\n    for (const loan of loans) {\n      activity.push({\n        type: 'loan-issued',\n        date: loan.issueDate,\n        details: {\n          book: loan.bookId,\n          issuedBy: loan.issuedBy,\n          dueDate: loan.dueDate,\n          status: loan.status,\n        }\n      });\n      if (loan.returnDate) {\n        activity.push({\n          type: 'loan-returned',\n          date: loan.returnDate,\n          details: {\n            book: loan.bookId,\n            issuedBy: loan.issuedBy,\n            dueDate: loan.dueDate,\n            status: loan.status,\n            fineAmount: loan.fineAmount,\n          }\n        });\n      }\n    }\n\n    // Fines\n    for (const fine of fines) {\n      activity.push({\n        type: 'fine',\n        date: fine.dateIssued,\n        details: {\n          amount: fine.amount,\n          reason: fine.reason,\n          description: fine.description,\n          status: fine.status,\n          loan: fine.loanId,\n        }\n      });\n      if (fine.datePaid) {\n        activity.push({\n          type: 'fine-paid',\n          date: fine.datePaid,\n          details: {\n            amount: fine.amount,\n            paidAmount: fine.paidAmount,\n            status: fine.status,\n            loan: fine.loanId,\n          }\n        });\n      }\n    }\n\n    // Reservations\n    for (const reservation of reservations) {\n      activity.push({\n        type: 'reservation',\n        date: reservation.requestDate,\n        details: {\n          book: reservation.bookId,\n          status: reservation.status,\n          priority: reservation.priority,\n          expiryDate: reservation.expiryDate,\n        }\n      });\n      if (reservation.status === 'fulfilled' && reservation.expiryDate) {\n        activity.push({\n          type: 'reservation-fulfilled',\n          date: reservation.expiryDate,\n          details: {\n            book: reservation.bookId,\n            status: reservation.status,\n            priority: reservation.priority,\n          }\n        });\n      }\n    }\n\n    // Audits (if user is a librarian)\n    for (const audit of audits) {\n      activity.push({\n        type: 'inventory-audit',\n        date: audit.auditDate,\n        details: {\n          book: audit.bookId,\n          expectedCount: audit.expectedCount,\n          actualCount: audit.actualCount,\n          discrepancy: audit.discrepancy,\n          status: audit.status,\n          notes: audit.notes,\n        }\n      });\n      if (audit.resolved && audit.resolvedDate) {\n        activity.push({\n          type: 'inventory-audit-resolved',\n          date: audit.resolvedDate,\n          details: {\n            book: audit.bookId,\n            status: audit.status,\n            notes: audit.notes,\n          }\n        });\n      }\n    }\n\n    // Sort all activities by date descending\n    activity.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n    res.json({ activity });\n  } catch (error) {\n    console.error('Get user activity error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// Export models and functions\nexport { \n  Loan, \n  Reservation, \n  Fine, \n  Notification, \n  InventoryAudit,\n  calculateDueDate,\n  calculateOverdueFine\n};\n\n// GET /api/librarian/inventory-audits - Get inventory audits\nexport async function getInventoryAudits(req: Request, res: Response) {\n  try {\n    const { bookId, status, resolved } = req.query;\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const skip = (page - 1) * limit;\n\n    let query: any = {};\n    if (bookId) query.bookId = bookId;\n    if (status) query.status = status;\n    if (resolved !== undefined) query.resolved = resolved === 'true';\n\n    const audits = await InventoryAudit.find(query)\n      .populate('bookId', 'title author isbn')\n      .populate('auditedBy', 'name email')\n      .populate('resolvedBy', 'name email')\n      .sort({ auditDate: -1 })\n      .skip(skip)\n      .limit(limit);\n\n    const total = await InventoryAudit.countDocuments(query);\n\n    res.json({\n      audits,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n  } catch (error) {\n    console.error('Get inventory audits error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/librarian/inventory-audits - Create inventory audit\nexport async function createInventoryAudit(req: Request, res: Response) {\n  try {\n    const librarian = (req as any).user;\n    const { bookId, expectedCount, actualCount, notes } = req.body;\n\n    if (!bookId || expectedCount === undefined || actualCount === undefined) {\n      return res.status(400).json({ message: 'Book ID, expected count, and actual count are required' });\n    }\n\n    // Validate input ranges\n    if (typeof expectedCount !== 'number' || expectedCount < 0) {\n      return res.status(400).json({ message: 'Expected count must be a non-negative number' });\n    }\n    \n    if (typeof actualCount !== 'number' || actualCount < 0) {\n      return res.status(400).json({ message: 'Actual count must be a non-negative number' });\n    }\n\n    // Check if book exists\n    const book = await Book.findById(bookId);\n    if (!book) {\n      return res.status(404).json({ message: 'Book not found' });\n    }\n\n    const discrepancy = actualCount - expectedCount;\n    let status = 'match';\n    \n    if (discrepancy < 0) {\n      status = 'shortage';\n    } else if (discrepancy > 0) {\n      status = 'surplus';\n    }\n\n    const audit = await InventoryAudit.create({\n      bookId,\n      auditedBy: librarian._id,\n      expectedCount,\n      actualCount,\n      discrepancy,\n      status,\n      notes: notes || ''\n    });\n\n    // Update book quantities in real-time based on audit findings\n    if (discrepancy !== 0) {\n      // Get current loan count to calculate proper available copies\n      const activeLoans = await Loan.countDocuments({ \n        bookId: book._id, \n        status: 'active' \n      });\n\n      // Get pending reservations count\n      const pendingReservations = await Reservation.countDocuments({\n        bookId: book._id,\n        status: 'pending'\n      });\n\n      // Update total copies to match actual count found\n      const newTotalCopies = actualCount;\n      \n      // Safety check: Ensure we don't reduce total copies below active loans\n      if (newTotalCopies < activeLoans) {\n        return res.status(400).json({ \n          message: `Cannot set total copies to ${newTotalCopies}. There are currently ${activeLoans} active loans for this book. Please handle active loans first.` \n        });\n      }\n      \n      // Calculate new available copies (ensure it's not negative)\n      const newAvailableCopies = Math.max(0, newTotalCopies - activeLoans);\n\n      // Warning if audit results in no available copies but there are pending reservations\n      if (newAvailableCopies === 0 && pendingReservations > 0) {\n        console.warn(`Warning: Audit resulted in 0 available copies but there are ${pendingReservations} pending reservations for book \"${book.title}\"`);\n      }\n\n      await Book.findByIdAndUpdate(book._id, {\n        totalCopies: newTotalCopies,\n        availableCopies: newAvailableCopies,\n        lastUpdated: new Date()\n      });\n\n      console.log(`Audit ${audit._id}: Updated book ${book.title} quantities - Total: ${book.totalCopies} → ${newTotalCopies}, Available: ${book.availableCopies} → ${newAvailableCopies}, Active Loans: ${activeLoans}`);\n    }\n\n    // Populate the audit with book and user details\n    const populatedAudit = await InventoryAudit.findById(audit._id)\n      .populate('bookId', 'title author isbn')\n      .populate('auditedBy', 'name email');\n\n    res.status(201).json({\n      message: 'Inventory audit created and book quantities updated in real-time',\n      audit: populatedAudit,\n      quantitiesUpdated: discrepancy !== 0\n    });\n  } catch (error) {\n    console.error('Create inventory audit error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// PUT /api/librarian/inventory-audits/:id - Resolve inventory audit\nexport async function resolveInventoryAudit(req: Request, res: Response) {\n  try {\n    const librarian = (req as any).user;\n    const { id } = req.params;\n    const { resolved, notes } = req.body;\n\n    const audit = await InventoryAudit.findById(id)\n      .populate('bookId', 'title author isbn');\n      \n    if (!audit) {\n      return res.status(404).json({ message: 'Inventory audit not found' });\n    }\n\n    if (audit.resolved) {\n      return res.status(400).json({ message: 'Audit is already resolved' });\n    }\n\n    audit.resolved = resolved || true;\n    audit.resolvedBy = librarian._id;\n    audit.resolvedDate = new Date();\n    if (notes) audit.notes = notes;\n    \n    await audit.save();\n\n    // Get current book state for confirmation\n    const currentBook = await Book.findById(audit.bookId);\n    const currentActiveLoans = await Loan.countDocuments({ \n      bookId: audit.bookId, \n      status: 'active' \n    });\n\n    // Populate the audit with user details\n    const populatedAudit = await InventoryAudit.findById(audit._id)\n      .populate('bookId', 'title author isbn')\n      .populate('auditedBy', 'name email')\n      .populate('resolvedBy', 'name email');\n\n    console.log(`Audit ${audit._id} resolved by ${librarian.name}: Book \"${currentBook?.title}\" confirmed with ${currentBook?.totalCopies} total copies, ${currentBook?.availableCopies} available, ${currentActiveLoans} on loan`);\n\n    res.json({\n      message: 'Inventory audit resolved and confirmed successfully',\n      audit: populatedAudit,\n      currentBookState: {\n        totalCopies: currentBook?.totalCopies,\n        availableCopies: currentBook?.availableCopies,\n        activeLoans: currentActiveLoans\n      }\n    });\n  } catch (error) {\n    console.error('Resolve inventory audit error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// PUT /api/librarian/reservations/:id - Update reservation status (FIXED)\nexport async function updateReservation(req: Request, res: Response) {\n  try {\n    const { id } = req.params;\n    const { status, notes } = req.body;\n    \n    if (!['pending', 'ready', 'fulfilled', 'cancelled', 'expired'].includes(status)) {\n      return res.status(400).json({ message: 'Invalid reservation status' });\n    }\n\n    const reservation = await Reservation.findById(id)\n      .populate('userId', 'name email')\n      .populate('bookId', 'title author');\n      \n    if (!reservation) {\n      return res.status(404).json({ message: 'Reservation not found' });\n    }\n\n    const oldStatus = reservation.status;\n\n    // Update reservation\n    reservation.status = status;\n    if (notes) reservation.notes = notes;\n    \n    if (status === 'ready') {\n      reservation.expiryDate = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days to pick up\n    }\n    \n    await reservation.save();\n\n    // Handle book status changes based on reservation status\n    if (status === 'ready' && oldStatus === 'pending') {\n      // When marking as ready, check if book is available\n      const book = await Book.findById(reservation.bookId);\n      if (book && book.availableCopies > 0) {\n        // Book is available, no need to change book status\n      } else if (book) {\n        // Book is not available, this might be a manual override\n        console.log(`Warning: Marking reservation as ready for book with ${book.availableCopies} available copies`);\n      }\n    } else if (status === 'fulfilled' && oldStatus === 'ready') {\n      // When fulfilling a reservation, reduce available copies\n      const book = await Book.findById(reservation.bookId);\n      if (book && book.availableCopies > 0) {\n        await Book.findByIdAndUpdate(reservation.bookId, {\n          $inc: { availableCopies: -1 }\n        });\n      }\n    } else if (status === 'cancelled' && oldStatus === 'ready') {\n      // When cancelling a ready reservation, potentially increase available copies\n      // This is optional as the book might have been made available for other purposes\n    }\n\n    // Create notification for user\n    let notificationTitle = '';\n    let notificationMessage = '';\n    \n    switch (status) {\n      case 'ready':\n        notificationTitle = 'Book Ready for Pickup';\n        notificationMessage = `Your reserved book \"${(reservation.bookId as any).title}\" is ready for pickup. Please collect it within 7 days.`;\n        break;\n      case 'cancelled':\n        notificationTitle = 'Reservation Cancelled';\n        notificationMessage = `Your reservation for \"${(reservation.bookId as any).title}\" has been cancelled.`;\n        break;\n      case 'expired':\n        notificationTitle = 'Reservation Expired';\n        notificationMessage = `Your reservation for \"${(reservation.bookId as any).title}\" has expired.`;\n        break;\n      case 'fulfilled':\n        notificationTitle = 'Reservation Fulfilled';\n        notificationMessage = `Your reservation for \"${(reservation.bookId as any).title}\" has been fulfilled.`;\n        break;\n    }\n    \n    if (notificationTitle) {\n      await Notification.create({\n        userId: reservation.userId,\n        type: 'reservation_ready',\n        title: notificationTitle,\n        message: notificationMessage,\n        relatedReservationId: reservation._id\n      });\n    }\n\n    res.json({\n      message: 'Reservation updated successfully',\n      reservation\n    });\n  } catch (error) {\n    console.error('Update reservation error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/librarian/fines - Create a manual fine\nexport async function createFine(req: Request, res: Response) {\n  try {\n    const librarian = (req as any).user;\n    const { userId, loanId, amount, reason, description } = req.body;\n\n    if (!userId || !amount || !reason) {\n      return res.status(400).json({ message: 'User ID, amount, and reason are required' });\n    }\n\n    if (!['overdue', 'damage', 'lost', 'replacement', 'other'].includes(reason)) {\n      return res.status(400).json({ message: 'Invalid fine reason' });\n    }\n\n    // Check if user exists\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    const fine = await Fine.create({\n      userId,\n      loanId: loanId || null,\n      amount,\n      reason,\n      description: description || `${reason} fine`,\n      dateIssued: new Date()\n    });\n\n    // Create notification for user\n    await Notification.create({\n      userId,\n      type: 'fine',\n      title: 'New Fine Issued',\n      message: `A fine of $${amount.toFixed(2)} has been issued for: ${description || reason}`,\n      relatedFineId: fine._id\n    });\n\n    res.status(201).json({\n      message: 'Fine created successfully',\n      fine\n    });\n  } catch (error) {\n    console.error('Create fine error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// PUT /api/librarian/fines/:id - Update fine status\nexport async function updateFine(req: Request, res: Response) {\n  try {\n    const librarian = (req as any).user;\n    const { id } = req.params;\n    const { status, paidAmount, waived, waivedReason } = req.body;\n\n    if (!['pending', 'paid', 'partial', 'waived', 'cancelled'].includes(status)) {\n      return res.status(400).json({ message: 'Invalid fine status' });\n    }\n\n    const fine = await Fine.findById(id)\n      .populate('userId', 'name email');\n      \n    if (!fine) {\n      return res.status(404).json({ message: 'Fine not found' });\n    }\n\n    // Update fine\n    fine.status = status;\n    \n    if (status === 'paid' || status === 'partial') {\n      fine.paidAmount = paidAmount || fine.amount;\n      fine.datePaid = new Date();\n    }\n    \n    if (status === 'waived' || waived) {\n      fine.waived = true;\n      fine.waivedBy = librarian._id;\n      fine.waivedReason = waivedReason;\n      fine.status = 'waived';\n    }\n    \n    await fine.save();\n\n    // Create notification for user\n    let notificationMessage = '';\n    switch (status) {\n      case 'paid':\n        notificationMessage = `Your fine of $${fine.amount.toFixed(2)} has been marked as paid.`;\n        break;\n      case 'waived':\n        notificationMessage = `Your fine of $${fine.amount.toFixed(2)} has been waived.`;\n        break;\n      case 'cancelled':\n        notificationMessage = `Your fine of $${fine.amount.toFixed(2)} has been cancelled.`;\n        break;\n    }\n    \n    if (notificationMessage) {\n      await Notification.create({\n        userId: fine.userId,\n        type: 'fine',\n        title: 'Fine Status Updated',\n        message: notificationMessage,\n        relatedFineId: fine._id\n      });\n    }\n\n    res.json({\n      message: 'Fine updated successfully',\n      fine\n    });\n  } catch (error) {\n    console.error('Update fine error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/librarian/fines - Get all fines for management\nexport async function getFines(req: Request, res: Response) {\n  try {\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const status = req.query.status as string;\n    const skip = (page - 1) * limit;\n\n    let query = {};\n    if (status) {\n      query = { status };\n    }\n\n    const fines = await Fine.find(query)\n      .populate('userId', 'name email')\n      .populate('loanId')\n      .sort({ dateIssued: -1 })\n      .skip(skip)\n      .limit(limit);\n\n    const total = await Fine.countDocuments(query);\n\n    res.json({\n      fines,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n  } catch (error) {\n    console.error('Get fines error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/librarian/books - Create a new book (librarian can add books)\nexport async function createBook(req: Request, res: Response) {\n  try {\n    const librarian = (req as any).user;\n    const {\n      title,\n      author,\n      isbn,\n      genre,\n      publishedYear,\n      publisher,\n      description,\n      coverImage,\n      totalCopies,\n      categories,\n      language,\n      pages,\n      hasDownload,\n      hasReadOnline,\n      location\n    } = req.body;\n\n    if (!title || !author || !isbn || !publisher || !publishedYear || !genre || !location) {\n      return res.status(400).json({ \n        message: \"Title, author, ISBN, publisher, publication year, genre, and location are required\" \n      });\n    }\n\n    const existingBook = await Book.findOne({ isbn });\n    if (existingBook) {\n      return res.status(400).json({ message: \"Book with this ISBN already exists\" });\n    }\n\n    const newBook = await Book.create({\n      title,\n      author,\n      isbn,\n      genre,\n      publishedYear,\n      publisher,\n      description,\n      coverImage,\n      totalCopies: totalCopies || 1,\n      availableCopies: totalCopies || 1,\n      categories: categories || [],\n      language: language || \"English\",\n      pages,\n      hasDownload: hasDownload || false,\n      hasReadOnline: hasReadOnline || false,\n      location\n    });\n\n    res.status(201).json({\n      message: \"Book created successfully\",\n      book: {\n        id: newBook._id,\n        title: newBook.title,\n        author: newBook.author,\n        isbn: newBook.isbn,\n        genre: newBook.genre,\n        publisher: newBook.publisher,\n        publishedYear: newBook.publishedYear,\n        description: newBook.description,\n        coverImage: newBook.coverImage,\n        totalCopies: newBook.totalCopies,\n        availableCopies: newBook.availableCopies,\n        location: newBook.location,\n        language: newBook.language,\n        pages: newBook.pages,\n        hasDownload: newBook.hasDownload,\n        hasReadOnline: newBook.hasReadOnline,\n        categories: newBook.categories,\n        addedDate: newBook.addedDate\n      }\n    });\n  } catch (error) {\n    console.error('Create book error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// PUT /api/librarian/books/:id - Update a book (librarian can edit books)\nexport async function updateBook(req: Request, res: Response) {\n  try {\n    const librarian = (req as any).user;\n    const { id } = req.params;\n    const updateData = req.body;\n\n    const book = await Book.findById(id);\n    if (!book) {\n      return res.status(404).json({ message: \"Book not found\" });\n    }\n\n    // Check if ISBN is being changed and already exists\n    if (updateData.isbn && updateData.isbn !== book.isbn) {\n      const existingBook = await Book.findOne({ isbn: updateData.isbn });\n      if (existingBook) {\n        return res.status(400).json({ message: \"ISBN is already taken\" });\n      }\n    }\n\n    // Check if total copies are being reduced\n    if (updateData.totalCopies !== undefined && updateData.totalCopies < book.totalCopies) {\n      const reduction = book.totalCopies - updateData.totalCopies;\n      \n      // Check if reduction would make available copies negative\n      if (book.availableCopies - reduction < 0) {\n        return res.status(400).json({ \n          message: `Cannot reduce total copies to ${updateData.totalCopies}. There are ${book.availableCopies} available copies and ${book.totalCopies - book.availableCopies} on loan.`\n        });\n      }\n\n      // Check for pending reservations that might be affected\n      const pendingReservations = await Reservation.countDocuments({\n        bookId: id,\n        status: 'pending'\n      });\n\n      if (pendingReservations > 0) {\n        return res.status(400).json({ \n          message: `Cannot reduce copies. There are ${pendingReservations} pending reservation(s) for this book. Please handle reservations first.`\n        });\n      }\n\n      // Update available copies accordingly\n      updateData.availableCopies = Math.max(0, book.availableCopies - reduction);\n    }\n\n    const updatedBook = await Book.findByIdAndUpdate(\n      id,\n      { ...updateData, lastUpdated: new Date() },\n      { new: true }\n    );\n\n    res.json({\n      message: \"Book updated successfully\",\n      book: {\n        id: updatedBook._id,\n        title: updatedBook.title,\n        author: updatedBook.author,\n        isbn: updatedBook.isbn,\n        genre: updatedBook.genre,\n        publisher: updatedBook.publisher,\n        publishedYear: updatedBook.publishedYear,\n        description: updatedBook.description,\n        coverImage: updatedBook.coverImage,\n        totalCopies: updatedBook.totalCopies,\n        availableCopies: updatedBook.availableCopies,\n        location: updatedBook.location,\n        language: updatedBook.language,\n        pages: updatedBook.pages,\n        hasDownload: updatedBook.hasDownload,\n        hasReadOnline: updatedBook.hasReadOnline,\n        categories: updatedBook.categories,\n        addedDate: updatedBook.addedDate,\n        lastUpdated: updatedBook.lastUpdated\n      }\n    });\n  } catch (error) {\n    console.error('Update book error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/librarian/books/:id - Get a single book with full details\nexport async function getBook(req: Request, res: Response) {\n  try {\n    const { id } = req.params;\n    \n    const book = await Book.findById(id);\n    if (!book) {\n      return res.status(404).json({ message: \"Book not found\" });\n    }\n\n    // Get additional information\n    const activeLoans = await Loan.countDocuments({ \n      bookId: book._id, \n      status: 'active' \n    });\n    \n    const pendingReservations = await Reservation.countDocuments({\n      bookId: book._id,\n      status: 'pending'\n    });\n\n    const bookWithDetails = {\n      ...book.toObject(),\n      activeLoans,\n      pendingReservations,\n      status: book.availableCopies === 0 ? 'out-of-stock' : \n              book.availableCopies <= 2 ? 'low-stock' : 'available'\n    };\n\n    res.json(bookWithDetails);\n  } catch (error) {\n    console.error('Get book error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// PUT /api/librarian/books/:id/status - Update book status\nexport async function updateBookStatus(req: Request, res: Response) {\n  try {\n    const { id } = req.params;\n    const { action, notes, affectedCopies = 1 } = req.body;\n\n    if (!['mark_lost', 'mark_damaged', 'mark_available', 'adjust_copies'].includes(action)) {\n      return res.status(400).json({ message: 'Invalid action' });\n    }\n\n    const book = await Book.findById(id);\n    if (!book) {\n      return res.status(404).json({ message: 'Book not found' });\n    }\n\n    let updateData: any = { lastUpdated: new Date() };\n    let message = '';\n    let reservationUpdates = [];\n\n    // Check for pending reservations that might be affected\n    const pendingReservations = await Reservation.find({\n      bookId: id,\n      status: 'pending'\n    }).populate('userId', 'name email');\n\n    switch (action) {\n      case 'mark_lost':\n        // Check if marking as lost would make book unavailable for pending reservations\n        if (book.availableCopies - affectedCopies <= 0 && pendingReservations.length > 0) {\n          return res.status(400).json({ \n            message: `Cannot mark ${affectedCopies} copy(ies) as lost. There are ${pendingReservations.length} pending reservation(s) for this book.`,\n            reservations: pendingReservations\n          });\n        }\n        \n        updateData.availableCopies = Math.max(0, book.availableCopies - affectedCopies);\n        updateData.totalCopies = Math.max(0, book.totalCopies - affectedCopies);\n        message = `Marked ${affectedCopies} copy(ies) as lost`;\n        break;\n        \n      case 'mark_damaged':\n        // Check if marking as damaged would make book unavailable for pending reservations\n        if (book.availableCopies - affectedCopies <= 0 && pendingReservations.length > 0) {\n          return res.status(400).json({ \n            message: `Cannot mark ${affectedCopies} copy(ies) as damaged. There are ${pendingReservations.length} pending reservation(s) for this book.`,\n            reservations: pendingReservations\n          });\n        }\n        \n        updateData.availableCopies = Math.max(0, book.availableCopies - affectedCopies);\n        message = `Marked ${affectedCopies} copy(ies) as damaged`;\n        break;\n        \n      case 'mark_available':\n        updateData.availableCopies = book.availableCopies + affectedCopies;\n        message = `Marked ${affectedCopies} copy(ies) as available`;\n        \n        // If book becomes available, check if any pending reservations can be marked as ready\n        if (pendingReservations.length > 0) {\n          const readyReservations = pendingReservations.slice(0, Math.min(affectedCopies, pendingReservations.length));\n          \n          for (const reservation of readyReservations) {\n            reservation.status = 'ready';\n            reservation.expiryDate = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);\n            reservation.notes = 'Automatically marked ready - book became available';\n            await reservation.save();\n            \n            // Create notification\n            await Notification.create({\n              userId: reservation.userId._id,\n              type: 'reservation_ready',\n              title: 'Book Ready for Pickup',\n              message: `Your reserved book \"${book.title}\" is now ready for pickup. Please collect it within 7 days.`,\n              relatedReservationId: reservation._id\n            });\n            \n            reservationUpdates.push(reservation);\n          }\n          \n          if (readyReservations.length > 0) {\n            message += `. ${readyReservations.length} reservation(s) automatically marked as ready.`;\n          }\n        }\n        break;\n        \n      case 'adjust_copies':\n        // Check if adjustment would make available copies negative\n        if (affectedCopies < book.totalCopies - book.availableCopies) {\n          return res.status(400).json({ \n            message: `Cannot reduce total copies to ${affectedCopies}. There are ${book.totalCopies - book.availableCopies} copies currently on loan.`\n          });\n        }\n        \n        // Check if adjustment would affect pending reservations\n        if (affectedCopies < book.availableCopies && pendingReservations.length > 0) {\n          return res.status(400).json({ \n            message: `Cannot reduce copies to ${affectedCopies}. There are ${pendingReservations.length} pending reservation(s) for this book.`,\n            reservations: pendingReservations\n          });\n        }\n        \n        updateData.totalCopies = affectedCopies;\n        updateData.availableCopies = Math.min(book.availableCopies, affectedCopies);\n        message = `Adjusted total copies to ${affectedCopies}`;\n        break;\n    }\n\n    const updatedBook = await Book.findByIdAndUpdate(id, updateData, { new: true });\n\n    res.json({\n      message,\n      book: updatedBook,\n      reservationUpdates\n    });\n  } catch (error) {\n    console.error('Update book status error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/librarian/notifications - Send notification to user\nexport async function sendNotification(req: Request, res: Response) {\n  try {\n    const { userId, type, title, message } = req.body;\n\n    if (!userId || !type || !title || !message) {\n      return res.status(400).json({ message: 'All fields are required' });\n    }\n\n    if (!['overdue', 'reservation_ready', 'fine', 'general', 'book_reminder'].includes(type)) {\n      return res.status(400).json({ message: 'Invalid notification type' });\n    }\n\n    // Check if user exists\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    const notification = await Notification.create({\n      userId,\n      type,\n      title,\n      message,\n      sent: true,\n      sentDate: new Date()\n    });\n\n    res.status(201).json({\n      message: 'Notification sent successfully',\n      notification\n    });\n  } catch (error) {\n    console.error('Send notification error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n} ","import { Request, Response } from \"express\";\nimport { User } from \"./auth\";\nimport { Book } from \"./admin\";\nimport { Loan, Fine, Reservation, Notification } from \"./librarian\";\nimport mongoose from \"mongoose\";\n\n// Feedback Schema\nconst feedbackSchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  message: { type: String, required: true },\n  type: { \n    type: String, \n    enum: ['general', 'service', 'book_request', 'complaint', 'suggestion'], \n    default: 'general' \n  },\n  status: { \n    type: String, \n    enum: ['pending', 'reviewed', 'resolved'], \n    default: 'pending' \n  },\n  response: String,\n  respondedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  respondedAt: Date\n}, { timestamps: true });\n\n// Book Suggestion Schema\nconst bookSuggestionSchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  title: { type: String, required: true },\n  author: { type: String, required: true },\n  reason: String,\n  isbn: String,\n  publisher: String,\n  status: { \n    type: String, \n    enum: ['pending', 'under_review', 'approved', 'rejected', 'purchased'], \n    default: 'pending' \n  },\n  reviewNotes: String,\n  reviewedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  reviewedAt: Date\n}, { timestamps: true });\n\nconst Feedback = mongoose.model(\"Feedback\", feedbackSchema);\nconst BookSuggestion = mongoose.model(\"BookSuggestion\", bookSuggestionSchema);\n\n// GET /api/student/stats - Get student dashboard statistics\nexport async function getStudentStats(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    \n    // Get current loans\n    const currentLoans = await Loan.countDocuments({ \n      userId, \n      status: 'active' \n    });\n    \n    // Get total borrowed books\n    const totalBorrowed = await Loan.countDocuments({ userId });\n    \n    // Get outstanding fines\n    const outstandingFines = await Fine.aggregate([\n      { $match: { userId: new mongoose.Types.ObjectId(userId), status: 'pending' } },\n      { $group: { _id: null, total: { $sum: '$amount' } } }\n    ]);\n    \n    // Get active reservations\n    const activeReservations = await Reservation.countDocuments({\n      userId,\n      status: { $in: ['pending', 'ready'] }\n    });\n    \n    // Standard borrowing limit\n    const borrowingLimit = 5;\n    const availableToLoan = Math.max(0, borrowingLimit - currentLoans);\n    \n    const stats = {\n      currentLoans,\n      totalBorrowed,\n      outstandingFines: outstandingFines[0]?.total || 0,\n      activeReservations,\n      borrowingLimit,\n      availableToLoan\n    };\n\n    res.json(stats);\n  } catch (error) {\n    console.error('Student stats error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/student/books - Browse and search books\nexport async function getBooksForStudent(req: Request, res: Response) {\n  try {\n    const { search = '', filter = 'all', page = 1, limit = 20 } = req.query;\n    const skip = (parseInt(page as string) - 1) * parseInt(limit as string);\n\n    let query: any = {};\n    let sort: any = { title: 1 };\n\n    // Search functionality\n    if (search) {\n      query = {\n        $or: [\n          { title: { $regex: search, $options: 'i' } },\n          { author: { $regex: search, $options: 'i' } },\n          { categories: { $in: [new RegExp(search as string, 'i')] } },\n          { genre: { $regex: search, $options: 'i' } }\n        ]\n      };\n    }\n\n    // Filter functionality\n    switch (filter) {\n      case 'available':\n        query.availableCopies = { $gt: 0 };\n        break;\n      case 'new':\n        // Books added in the last 30 days\n        query.addedDate = { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) };\n        sort = { addedDate: -1 };\n        break;\n      case 'popular':\n        // This would require loan statistics - for now, sort by total copies as a proxy\n        sort = { totalCopies: -1 };\n        break;\n    }\n\n    const books = await Book.find(query)\n      .sort(sort)\n      .skip(skip)\n      .limit(parseInt(limit as string));\n\n    const total = await Book.countDocuments(query);\n\n    res.json({\n      books,\n      pagination: {\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        total,\n        pages: Math.ceil(total / parseInt(limit as string))\n      }\n    });\n  } catch (error) {\n    console.error('Get books for student error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/student/loans - Get student's loans\nexport async function getStudentLoans(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const { status } = req.query;\n\n    let query: any = { userId };\n    if (status) {\n      query.status = status;\n    }\n\n    const loans = await Loan.find(query)\n      .populate('bookId', 'title author isbn genre')\n      .populate('issuedBy', 'name')\n      .sort({ issueDate: -1 });\n\n    res.json(loans);\n  } catch (error) {\n    console.error('Get student loans error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/student/loans/:id/renew - Renew a loan\nexport async function renewLoan(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const { id } = req.params;\n\n    const loan = await Loan.findOne({ _id: id, userId, status: 'active' });\n    \n    if (!loan) {\n      return res.status(404).json({ message: 'Loan not found or not active' });\n    }\n\n    if (loan.renewalCount >= loan.maxRenewals) {\n      return res.status(400).json({ message: 'Maximum renewals reached' });\n    }\n\n    // Check if loan is overdue\n    if (new Date() > loan.dueDate) {\n      return res.status(400).json({ message: 'Cannot renew overdue books. Please contact the library.' });\n    }\n\n    // Extend due date by 14 days\n    const newDueDate = new Date(loan.dueDate);\n    newDueDate.setDate(newDueDate.getDate() + 14);\n\n    await Loan.findByIdAndUpdate(id, {\n      dueDate: newDueDate,\n      $inc: { renewalCount: 1 }\n    });\n\n    res.json({ message: 'Loan renewed successfully', newDueDate });\n  } catch (error) {\n    console.error('Renew loan error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/student/reservations - Get student's reservations\nexport async function getStudentReservations(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n\n    const reservations = await Reservation.find({ userId })\n      .populate('bookId', 'title author isbn genre')\n      .sort({ requestDate: -1 });\n\n    res.json(reservations);\n  } catch (error) {\n    console.error('Get student reservations error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/student/reservations - Create a new reservation\nexport async function createReservation(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const { bookId } = req.body;\n\n    if (!bookId) {\n      return res.status(400).json({ message: 'Book ID is required' });\n    }\n\n    // Check if book exists\n    const book = await Book.findById(bookId);\n    if (!book) {\n      return res.status(404).json({ message: 'Book not found' });\n    }\n\n    // Check if book is available\n    if (book.availableCopies > 0) {\n      return res.status(400).json({ message: 'Book is currently available. Visit the library to borrow it.' });\n    }\n\n    // Check if user already has a reservation for this book\n    const existingReservation = await Reservation.findOne({\n      userId,\n      bookId,\n      status: { $in: ['pending', 'ready'] }\n    });\n\n    if (existingReservation) {\n      return res.status(400).json({ message: 'You already have a reservation for this book' });\n    }\n\n    // Get next priority number\n    const lastReservation = await Reservation.findOne({ bookId })\n      .sort({ priority: -1 });\n    \n    const priority = (lastReservation?.priority || 0) + 1;\n\n    const reservation = await Reservation.create({\n      userId,\n      bookId,\n      priority,\n      status: 'pending'\n    });\n\n    res.status(201).json({\n      message: 'Reservation created successfully',\n      reservation\n    });\n  } catch (error) {\n    console.error('Create reservation error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// DELETE /api/student/reservations/:id - Cancel a reservation\nexport async function cancelReservation(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const { id } = req.params;\n\n    const reservation = await Reservation.findOne({ _id: id, userId });\n    \n    if (!reservation) {\n      return res.status(404).json({ message: 'Reservation not found' });\n    }\n\n    if (reservation.status === 'fulfilled') {\n      return res.status(400).json({ message: 'Cannot cancel fulfilled reservation' });\n    }\n\n    await Reservation.findByIdAndUpdate(id, { status: 'cancelled' });\n\n    res.json({ message: 'Reservation cancelled successfully' });\n  } catch (error) {\n    console.error('Cancel reservation error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/student/fines - Get student's fines\nexport async function getStudentFines(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n\n    const fines = await Fine.find({ userId })\n      .populate('loanId')\n      .sort({ dateIssued: -1 });\n\n    res.json(fines);\n  } catch (error) {\n    console.error('Get student fines error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/student/notifications - Get student's notifications\nexport async function getStudentNotifications(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n\n    const notifications = await Notification.find({ userId })\n      .sort({ createdAt: -1 })\n      .limit(50);\n\n    res.json(notifications);\n  } catch (error) {\n    console.error('Get student notifications error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/student/notifications/:id/read - Mark notification as read\nexport async function markNotificationAsRead(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const { id } = req.params;\n\n    await Notification.findOneAndUpdate(\n      { _id: id, userId },\n      { read: true, readDate: new Date() }\n    );\n\n    res.json({ message: 'Notification marked as read' });\n  } catch (error) {\n    console.error('Mark notification as read error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/student/feedback - Submit feedback\nexport async function submitFeedback(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const { message, type = 'general' } = req.body;\n\n    if (!message || message.trim().length === 0) {\n      return res.status(400).json({ message: 'Feedback message is required' });\n    }\n\n    const feedback = await Feedback.create({\n      userId,\n      message: message.trim(),\n      type\n    });\n\n    res.status(201).json({\n      message: 'Feedback submitted successfully',\n      feedback\n    });\n  } catch (error) {\n    console.error('Submit feedback error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/student/suggestions - Submit book suggestion\nexport async function submitBookSuggestion(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const { title, author, reason, isbn, publisher } = req.body;\n\n    if (!title || !author) {\n      return res.status(400).json({ message: 'Title and author are required' });\n    }\n\n    // Check if book already exists\n    if (isbn) {\n      const existingBook = await Book.findOne({ isbn });\n      if (existingBook) {\n        return res.status(400).json({ message: 'This book already exists in our collection' });\n      }\n    }\n\n    const suggestion = await BookSuggestion.create({\n      userId,\n      title: title.trim(),\n      author: author.trim(),\n      reason: reason?.trim(),\n      isbn,\n      publisher\n    });\n\n    res.status(201).json({\n      message: 'Book suggestion submitted successfully',\n      suggestion\n    });\n  } catch (error) {\n    console.error('Submit book suggestion error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/student/profile - Get student profile\nexport async function getStudentProfile(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    \n    const user = await User.findById(userId)\n      .select('-passwordHash -resetToken -resetTokenExpiry -sessions');\n    \n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    // Get additional statistics\n    const currentLoans = await Loan.countDocuments({ userId, status: 'active' });\n    const totalBorrowed = await Loan.countDocuments({ userId });\n    const outstandingFines = await Fine.aggregate([\n      { $match: { userId: new mongoose.Types.ObjectId(userId), status: 'pending' } },\n      { $group: { _id: null, total: { $sum: '$amount' } } }\n    ]);\n\n    const profile = {\n      ...user.toObject(),\n      currentLoans,\n      totalBorrowed,\n      outstandingFines: outstandingFines[0]?.total || 0\n    };\n\n    res.json(profile);\n  } catch (error) {\n    console.error('Get student profile error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/student/loans - Student borrows a book\nexport async function borrowBook(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const { bookId, loanDays = 14 } = req.body;\n\n    if (!bookId) {\n      return res.status(400).json({ message: 'Book ID is required' });\n    }\n\n    // Check if user exists and is active\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    if (user.accountStatus !== 'active') {\n      return res.status(400).json({ message: 'Account is not active. Please contact the library.' });\n    }\n\n    // Check if book exists\n    const book = await Book.findById(bookId);\n    if (!book) {\n      return res.status(404).json({ message: 'Book not found' });\n    }\n\n    // Check if book is available\n    if (book.availableCopies <= 0) {\n      return res.status(400).json({ message: 'Book is not available for loan. Please reserve it instead.' });\n    }\n\n    // Check if user already has this book on loan\n    const existingLoan = await Loan.findOne({\n      userId,\n      bookId,\n      status: 'active'\n    });\n\n    if (existingLoan) {\n      return res.status(400).json({ message: 'You already have this book on loan' });\n    }\n\n    // Check user's borrowing limit\n    const currentLoans = await Loan.countDocuments({ \n      userId, \n      status: 'active' \n    });\n\n    const borrowingLimit = 5; // Standard limit for students\n    if (currentLoans >= borrowingLimit) {\n      return res.status(400).json({ \n        message: `You have reached your borrowing limit of ${borrowingLimit} books. Please return some books before borrowing more.` \n      });\n    }\n\n    // Check for outstanding fines\n    const outstandingFines = await Fine.aggregate([\n      { $match: { userId: new mongoose.Types.ObjectId(userId), status: 'pending' } },\n      { $group: { _id: null, total: { $sum: '$amount' } } }\n    ]);\n\n    const totalFines = outstandingFines[0]?.total || 0;\n    if (totalFines > 0) {\n      return res.status(400).json({ \n        message: `You have outstanding fines of $${totalFines.toFixed(2)}. Please pay your fines before borrowing books.` \n      });\n    }\n\n    // Check for overdue books\n    const overdueBooks = await Loan.countDocuments({\n      userId,\n      status: 'active',\n      dueDate: { $lt: new Date() }\n    });\n\n    if (overdueBooks > 0) {\n      return res.status(400).json({ \n        message: `You have ${overdueBooks} overdue book(s). Please return overdue books before borrowing new ones.` \n      });\n    }\n\n    // Create loan record\n    const dueDate = new Date();\n    dueDate.setDate(dueDate.getDate() + loanDays);\n\n    const loan = await Loan.create({\n      userId,\n      bookId,\n      issuedBy: userId, // Self-service loan\n      dueDate,\n      status: 'active'\n    });\n\n    // Update book availability\n    await Book.findByIdAndUpdate(bookId, {\n      $inc: { availableCopies: -1 }\n    });\n\n    // Populate loan with book details\n    const populatedLoan = await Loan.findById(loan._id)\n      .populate('bookId', 'title author isbn genre');\n\n    res.status(201).json({\n      message: 'Book borrowed successfully',\n      loan: populatedLoan,\n      dueDate: dueDate.toISOString()\n    });\n  } catch (error) {\n    console.error('Borrow book error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// POST /api/student/loans/:id/return - Student returns a book\nexport async function returnStudentBook(req: Request, res: Response) {\n  try {\n    const userId = (req as any).userId;\n    const { id } = req.params;\n\n    const loan = await Loan.findOne({ _id: id, userId, status: 'active' });\n    \n    if (!loan) {\n      return res.status(404).json({ message: 'Loan not found or not active' });\n    }\n\n    const returnDate = new Date();\n    let fine = 0;\n\n    // Calculate overdue fine if applicable\n    if (returnDate > loan.dueDate) {\n      const daysOverdue = Math.ceil((returnDate.getTime() - loan.dueDate.getTime()) / (1000 * 60 * 60 * 24));\n      fine = daysOverdue * 0.50; // $0.50 per day overdue\n    }\n\n    // Update loan record\n    loan.returnDate = returnDate;\n    loan.status = 'returned';\n    loan.fineAmount = fine;\n    await loan.save();\n\n    // Update book availability\n    await Book.findByIdAndUpdate(loan.bookId, {\n      $inc: { availableCopies: 1 }\n    });\n\n    // Create fine record if applicable\n    if (fine > 0) {\n      await Fine.create({\n        userId: loan.userId,\n        loanId: loan._id,\n        amount: fine,\n        reason: 'overdue',\n        description: `Overdue fine for book return`\n      });\n    }\n\n    res.json({\n      message: 'Book returned successfully',\n      fine: fine > 0 ? fine : null\n    });\n  } catch (error) {\n    console.error('Return book error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// Helper function to create notifications for students\nasync function createNotificationForUser(\n  userId: string, \n  type: string, \n  title: string, \n  message: string,\n  relatedLoanId?: string,\n  relatedReservationId?: string,\n  relatedFineId?: string\n) {\n  try {\n    await Notification.create({\n      userId,\n      type,\n      title,\n      message,\n      relatedLoanId,\n      relatedReservationId,\n      relatedFineId\n    });\n  } catch (error) {\n    console.error('Error creating notification:', error);\n  }\n}\n\n// Background function to check for overdue books and send notifications\nasync function checkOverdueAndSendReminders() {\n  try {\n    const overdueLoans = await Loan.find({\n      status: 'active',\n      dueDate: { $lt: new Date() }\n    }).populate('userId', 'name email');\n\n    for (const loan of overdueLoans) {\n      // Check if notification already sent\n      const existingNotification = await Notification.findOne({\n        userId: loan.userId,\n        relatedLoanId: loan._id,\n        type: 'overdue'\n      });\n\n      if (!existingNotification) {\n        await createNotificationForUser(\n          loan.userId._id.toString(),\n          'overdue',\n          'Overdue Book Reminder',\n          `Your book \"${(loan.bookId as any).title}\" is overdue. Please return it as soon as possible to avoid additional fines.`,\n          loan._id.toString()\n        );\n      }\n    }\n  } catch (error) {\n    console.error('Error checking overdue books:', error);\n  }\n}\n\n// Export models and functions\nexport { \n  Feedback, \n  BookSuggestion,\n  createNotificationForUser,\n  checkOverdueAndSendReminders\n}; ","import mongoose from 'mongoose';\n\nconst SearchHistorySchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  query: { type: String, required: true },\n  date: { type: Date, default: Date.now }\n});\n\nexport default mongoose.model('SearchHistory', SearchHistorySchema, 'search_history'); ","import mongoose from 'mongoose';\n\nconst UserSchema = new mongoose.Schema({\n  email: { type: String, required: true, unique: true },\n  name: String,\n  password: String,\n  // Add any other fields you use\n});\n\nexport default mongoose.models.User || mongoose.model('User', UserSchema, 'users');","import { Request, Response } from \"express\";\nimport { Book } from \"./admin\";\nimport { verifyTokenWithSession } from \"./auth\";\nimport SearchHistory from '../models/SearchHistory';\nimport User from '../models/User';\nimport { Router } from 'express';\nconst router = Router();\n\n// GET /api/search - Search books with filters\nexport async function searchBooks(req: Request, res: Response) {\n  try {\n    const {\n      q = '', // Basic search query\n      refineQuery = '', // Search within results\n      title = '',\n      author = '',\n      genre = '', // Can be array for multiple genres\n      language = '',\n      fromDate = '',\n      toDate = '',\n      isbn = '',\n      filter = 'all', // all, available, new, popular, download, online\n      sortBy = 'relevance', // relevance, title, author, date\n      page = 1,\n      limit = 20\n    } = req.query;\n\n    const skip = (parseInt(page as string) - 1) * parseInt(limit as string);\n    let query: any = {};\n    let sort: any = { title: 1 };\n\n    // Build search query\n    const searchTerms = [];\n    \n    // Main search query\n    if (q) {\n      searchTerms.push(\n        { title: { $regex: q, $options: 'i' } },\n        { author: { $regex: q, $options: 'i' } },\n        { categories: { $in: [new RegExp(q as string, 'i')] } },\n        { genre: { $regex: q, $options: 'i' } },\n        { isbn: { $regex: q, $options: 'i' } },\n        { description: { $regex: q, $options: 'i' } }\n      );\n    }\n\n    // Refine search query (search within results)\n    if (refineQuery) {\n      searchTerms.push(\n        { title: { $regex: refineQuery, $options: 'i' } },\n        { author: { $regex: refineQuery, $options: 'i' } },\n        { categories: { $in: [new RegExp(refineQuery as string, 'i')] } },\n        { description: { $regex: refineQuery, $options: 'i' } }\n      );\n    }\n\n    if (title) {\n      // Title search should be more specific and have higher priority\n      query.title = { $regex: title, $options: 'i' };\n    }\n\n    if (author) {\n      searchTerms.push({ author: { $regex: author, $options: 'i' } });\n    }\n\n    // Handle multiple genres\n    const genres = Array.isArray(genre) ? genre : (genre ? [genre] : []);\n    if (genres.length > 0 && !genres.includes('All fields')) {\n      const genreConditions = genres.map(g => ({ genre: { $regex: g, $options: 'i' } }));\n      if (genreConditions.length === 1) {\n        query.genre = genreConditions[0].genre;\n      } else {\n        query.$or = query.$or ? query.$or.concat(genreConditions) : genreConditions;\n      }\n    }\n\n    if (language && language !== 'All Languages' && language !== 'Any Language') {\n      query.language = { $regex: language, $options: 'i' };\n    }\n\n    if (isbn) {\n      searchTerms.push({ isbn: { $regex: isbn, $options: 'i' } });\n    }\n\n    // Date range filter\n    if (fromDate || toDate) {\n      const dateQuery: any = {};\n      if (fromDate) {\n        dateQuery.$gte = parseInt(fromDate as string);\n      }\n      if (toDate) {\n        dateQuery.$lte = parseInt(toDate as string);\n      }\n      query.publishedYear = dateQuery;\n    }\n\n    // Combine search terms with AND logic if both main query and refine query exist\n    if (searchTerms.length > 0) {\n      if (q && refineQuery) {\n        // Both main search and refine search - combine with AND\n        const mainSearchTerms = [];\n        const refineSearchTerms = [];\n        \n        if (q) {\n          mainSearchTerms.push(\n            { title: { $regex: q, $options: 'i' } },\n            { author: { $regex: q, $options: 'i' } },\n            { categories: { $in: [new RegExp(q as string, 'i')] } },\n            { genre: { $regex: q, $options: 'i' } },\n            { isbn: { $regex: q, $options: 'i' } },\n            { description: { $regex: q, $options: 'i' } }\n          );\n        }\n        \n        if (refineQuery) {\n          refineSearchTerms.push(\n            { title: { $regex: refineQuery, $options: 'i' } },\n            { author: { $regex: refineQuery, $options: 'i' } },\n            { categories: { $in: [new RegExp(refineQuery as string, 'i')] } },\n            { description: { $regex: refineQuery, $options: 'i' } }\n          );\n        }\n        \n        query.$and = [\n          { $or: mainSearchTerms },\n          { $or: refineSearchTerms }\n        ];\n      } else {\n        // Only one type of search - use OR\n        query.$or = query.$or ? query.$or.concat(searchTerms) : searchTerms;\n      }\n    }\n\n    // Apply filters\n    switch (filter) {\n      case 'available':\n        query.availableCopies = { $gt: 0 };\n        break;\n      case 'new':\n        query.addedDate = { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) };\n        break;\n      case 'popular':\n        // Keep existing sort logic\n        break;\n      case 'download':\n        query.hasDownload = true;\n        break;\n      case 'online':\n        query.hasReadOnline = true;\n        break;\n    }\n\n    // Apply sorting\n    switch (sortBy) {\n      case 'title':\n        sort = { title: 1 };\n        break;\n      case 'author':\n        sort = { author: 1 };\n        break;\n      case 'date':\n        sort = { publishedYear: -1 };\n        break;\n      case 'relevance':\n      default:\n        // For relevance, prioritize exact matches in title, then author\n        if (q || refineQuery) {\n          sort = { title: 1 }; // Could be enhanced with text score\n        } else {\n          sort = { title: 1 };\n        }\n        break;\n    }\n\n    // Override sort for specific filters\n    if (filter === 'new') {\n      sort = { addedDate: -1 };\n    } else if (filter === 'popular') {\n      sort = { totalCopies: -1 };\n    }\n\n    console.log('Search query:', JSON.stringify(query, null, 2));\n    console.log('Sort:', sort);\n\n    const books = await Book.find(query)\n      .sort(sort)\n      .skip(skip)\n      .limit(parseInt(limit as string))\n      .select('title author isbn genre publishedYear publisher description coverImage totalCopies availableCopies categories language pages location addedDate hasDownload hasReadOnline');\n\n    const total = await Book.countDocuments(query);\n\n    res.json({\n      books,\n      pagination: {\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        total,\n        pages: Math.ceil(total / parseInt(limit as string))\n      },\n      query: req.query,\n      appliedFilters: {\n        genres: genres,\n        language: language !== 'Any Language' ? language : null,\n        accessType: filter !== 'all' ? filter : null,\n        sortBy: sortBy\n      }\n    });\n  } catch (error) {\n    console.error('Search error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/search/suggestions - Get search suggestions\nexport async function getSearchSuggestions(req: Request, res: Response) {\n  try {\n    const { q } = req.query;\n    \n    if (!q || (q as string).length < 2) {\n      return res.json({ suggestions: [] });\n    }\n\n    const suggestions = await Book.aggregate([\n      {\n        $match: {\n          $or: [\n            { title: { $regex: q, $options: 'i' } },\n            { author: { $regex: q, $options: 'i' } },\n            { genre: { $regex: q, $options: 'i' } }\n          ]\n        }\n      },\n      {\n        $group: {\n          _id: null,\n          titles: { $addToSet: '$title' },\n          authors: { $addToSet: '$author' },\n          genres: { $addToSet: '$genre' }\n        }\n      },\n      {\n        $project: {\n          suggestions: {\n            $slice: [\n              {\n                $concatArrays: [\n                  { $slice: ['$titles', 5] },\n                  { $slice: ['$authors', 3] },\n                  { $slice: ['$genres', 2] }\n                ]\n              },\n              10\n            ]\n          }\n        }\n      }\n    ]);\n\n    res.json({\n      suggestions: suggestions[0]?.suggestions || []\n    });\n  } catch (error) {\n    console.error('Search suggestions error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n} \n\n// Add user search history endpoints\nrouter.post('/history', verifyTokenWithSession, async (req, res) => {\n  try {\n    const userId = (req as any).userId;\n    const { query } = req.body;\n    console.log('POST /api/search/history', { userId, query });\n    console.log('Request body:', req.body);\n\n    if (!query || typeof query !== 'string' || !query.trim()) {\n      console.error('Query missing or invalid in request body');\n      return res.status(400).json({ error: 'Query required' });\n    }\n\n    // Log before user lookup\n    console.log('Looking up user...');\n    const user = await User.findById(String(userId));\n    if (!user) {\n      console.error('User not found for userId:', userId);\n      return res.status(400).json({ error: 'User not found' });\n    }\n    console.log('User found:', user._id);\n\n    // Log before creating search history\n    console.log('Creating search history...');\n    const newHistory = await SearchHistory.create({ userId, query });\n    console.log('Created search history:', newHistory);\n\n    // Keep only the latest 10 searches per user\n    const userHistory = await SearchHistory.find({ userId }).sort({ date: -1 });\n    if (userHistory.length > 10) {\n      const idsToDelete = userHistory.slice(10).map(doc => doc._id);\n      await SearchHistory.deleteMany({ _id: { $in: idsToDelete } });\n    }\n\n    res.json({ success: true });\n  } catch (err) {\n    console.error('Error saving search history:', err);\n    res.status(500).json({ error: 'Failed to save search history' });\n  }\n});\n\nrouter.get('/history', verifyTokenWithSession, async (req, res) => {\n  const userId = (req as any).userId;\n  const history = await SearchHistory.find({ userId }).sort({ date: -1 }).limit(10);\n  res.json(history);\n});\n\nrouter.delete('/history', verifyTokenWithSession, async (req, res) => {\n  const userId = (req as any).userId;\n  await SearchHistory.deleteMany({ userId });\n  res.json({ success: true });\n});\n\n// TEST ROUTE: Manually create a search history document\nrouter.post('/history/test', async (req, res) => {\n  try {\n    const { userId, query } = req.body;\n    if (!userId || !query) return res.status(400).json({ error: 'userId and query required' });\n    const user = await User.findById(String(userId));\n    if (!user) return res.status(404).json({ error: 'User not found' });\n    const newHistory = await SearchHistory.create({ userId, query });\n    res.json({ success: true, newHistory });\n  } catch (err) {\n    res.status(500).json({ error: err.message });\n  }\n});\n\nexport const searchRoutes = router; ","import { Request, Response } from \"express\";\nimport { Book } from \"./admin\";\nimport { Loan, Reservation } from \"./librarian\";\nimport { Router } from \"express\";\nconst router = Router();\n\n// Custom endpoint for category counts FIRST\nrouter.get(\"/category-counts\", async (req, res) => {\n  try {\n    const counts = await Book.aggregate([\n      { $match: { categories: { $exists: true, $ne: [] } } },\n      { $unwind: \"$categories\" },\n      { $group: { _id: \"$categories\", count: { $sum: 1 } } }\n    ]);\n    res.json(counts);\n  } catch (err) {\n    console.error(\"Category count aggregation error:\", err);\n    res.status(500).json({ error: \"Failed to fetch category counts\", details: err.message });\n  }\n});\n\n// GET /api/books/:id - Get book details\nexport async function getBookDetails(req: Request, res: Response) {\n  try {\n    const { id } = req.params;\n    \n    const book = await Book.findById(id);\n    if (!book) {\n      return res.status(404).json({ message: \"Book not found\" });\n    }\n\n    // Get additional information\n    const activeLoans = await Loan.countDocuments({ \n      bookId: book._id, \n      status: 'active' \n    });\n    \n    const pendingReservations = await Reservation.countDocuments({\n      bookId: book._id,\n      status: 'pending'\n    });\n\n    const bookWithDetails = {\n      ...book.toObject(),\n      activeLoans,\n      pendingReservations,\n      status: book.availableCopies === 0 ? 'out-of-stock' : \n              book.availableCopies <= 2 ? 'low-stock' : 'available'\n    };\n\n    res.json(bookWithDetails);\n  } catch (error) {\n    console.error('Get book details error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\n// GET /api/books - Get all books with pagination\nexport async function getAllBooks(req: Request, res: Response) {\n  try {\n    const { \n      page = 1, \n      limit = 20, \n      genre, \n      available,\n      language = '',\n      filter = 'all',\n      sortBy = 'title',\n      refineQuery = '',\n      title = ''\n    } = req.query;\n    const skip = (parseInt(page as string) - 1) * parseInt(limit as string);\n    \n    let query: any = {};\n    let sort: any = { title: 1 };\n    \n    // Handle multiple genres\n    const genres = Array.isArray(genre) ? genre : (genre ? [genre] : []);\n    if (genres.length > 0 && !genres.includes('all')) {\n      const genreConditions = genres.map(g => ({ genre: { $regex: g, $options: 'i' } }));\n      if (genreConditions.length === 1) {\n        query.genre = genreConditions[0].genre;\n      } else {\n        query.$or = genreConditions;\n      }\n    }\n    \n    // Title filter (specific search by title)\n    if (title) {\n      query.title = { $regex: title, $options: 'i' };\n    }\n    \n    // Language filter\n    if (language && language !== 'Any Language' && language !== 'All Languages') {\n      query.language = { $regex: language, $options: 'i' };\n    }\n    \n    // Refine query (search within results)\n    if (refineQuery) {\n      const refineSearchTerms = [\n        { title: { $regex: refineQuery, $options: 'i' } },\n        { author: { $regex: refineQuery, $options: 'i' } },\n        { categories: { $in: [new RegExp(refineQuery as string, 'i')] } },\n        { description: { $regex: refineQuery, $options: 'i' } }\n      ];\n      \n      if (query.$or) {\n        // Combine existing genre filters with refine search using AND\n        query.$and = [\n          { $or: query.$or },\n          { $or: refineSearchTerms }\n        ];\n        delete query.$or;\n      } else {\n        query.$or = refineSearchTerms;\n      }\n    }\n    \n    // Apply availability filter (backward compatibility)\n    if (available === 'true') {\n      query.availableCopies = { $gt: 0 };\n    }\n    \n    // Apply access type filters\n    switch (filter) {\n      case 'available':\n        query.availableCopies = { $gt: 0 };\n        break;\n      case 'new':\n        query.addedDate = { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) };\n        break;\n      case 'download':\n        query.hasDownload = true;\n        break;\n      case 'online':\n        query.hasReadOnline = true;\n        break;\n      case 'popular':\n        // Will be handled in sorting\n        break;\n    }\n\n    // Apply sorting\n    switch (sortBy) {\n      case 'title':\n        sort = { title: 1 };\n        break;\n      case 'author':\n        sort = { author: 1 };\n        break;\n      case 'date':\n        sort = { publishedYear: -1 };\n        break;\n      case 'relevance':\n      default:\n        sort = { title: 1 };\n        break;\n    }\n    \n    // Override sort for specific filters\n    if (filter === 'new') {\n      sort = { addedDate: -1 };\n    } else if (filter === 'popular') {\n      sort = { totalCopies: -1 };\n    }\n\n    console.log('Books API query:', JSON.stringify(query, null, 2));\n    console.log('Books API sort:', sort);\n\n    const books = await Book.find(query)\n      .sort(sort)\n      .skip(skip)\n      .limit(parseInt(limit as string))\n      .select('title author isbn genre publishedYear publisher description coverImage totalCopies availableCopies categories language pages location addedDate hasDownload hasReadOnline');\n\n    const total = await Book.countDocuments(query);\n\n    res.json({\n      books,\n      pagination: {\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        total,\n        pages: Math.ceil(total / parseInt(limit as string))\n      },\n      appliedFilters: {\n        genres: genres,\n        language: language !== 'Any Language' ? language : null,\n        accessType: filter !== 'all' ? filter : null,\n        sortBy: sortBy\n      }\n    });\n  } catch (error) {\n    console.error('Get all books error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n} \n\nexport default router; ","import express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { getProfile, updateProfile, changePassword, deleteProfile } from \"./routes/profile\";\nimport mongoose from \"mongoose\";\nimport { register, login, forgotPassword, resetPassword, getUserSessions, revokeSession, revokeAllSessions, refreshSession, verifyTokenWithSession, requireAdmin, requireLibrarian, requireUser, uploadProfilePicture, getProfilePicture, removeProfilePicture } from \"./routes/auth\";\nimport { getAdminStats, getUsers, createUser, updateUser, deleteUser, getBooks, createBook, updateBook, deleteBook } from \"./routes/admin\";\nimport { getLibrarianDashboard, getLibrarianBooks, getBook, createBook as createLibrarianBook, updateBook as updateLibrarianBook, issueBook, returnBook, getLoans, getOverdueBooks, getReservations, searchUsers, getUserLoans, getUserActivity, updateReservation, createFine, updateFine, getFines, updateBookStatus, sendNotification, getInventoryAudits, createInventoryAudit, resolveInventoryAudit } from \"./routes/librarian\";\nimport { getStudentStats, getBooksForStudent, getStudentLoans, borrowBook, returnStudentBook, renewLoan, getStudentReservations, createReservation, cancelReservation, getStudentFines, getStudentNotifications, markNotificationAsRead, submitFeedback, submitBookSuggestion, getStudentProfile } from \"./routes/student\";\nimport { searchBooks, getSearchSuggestions } from \"./routes/search\";\nimport { getBookDetails, getAllBooks } from \"./routes/books\";\nimport { searchRoutes } from './routes/search';\nimport session from \"express-session\";\nimport passport from \"passport\";\nimport { router as authRouter } from \"./routes/auth\";\nimport booksRouter from \"./routes/books\";\n\nexport function createServer() {\n  const app = express();\n\n  // Connect to MongoDB\n  const MONGO_URI = process.env.MONGO_URI || \"mongodb://127.0.0.1:27017/library\";\n  console.log(\"Connecting to MongoDB:\", MONGO_URI);\n  mongoose.connect(MONGO_URI).then(() => {\n    console.log(\"Connected to MongoDB successfully\");\n    console.log(\"Database: library\");\n  }).catch((err) => {\n    console.error(\"MongoDB connection error:\", err);\n  });\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Add session and passport middleware for OAuth\n  app.use(session({\n    secret: process.env.SESSION_SECRET || \"dev_secret\",\n    resave: false,\n    saveUninitialized: false,\n  }));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Add request logging middleware\n  app.use((req, res, next) => {\n    if (req.path.startsWith('/api/')) {\n      console.log(`${req.method} ${req.path}`);\n    }\n    next();\n  });\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    res.json({ message: \"Hello from Express server v2!\" });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n  app.get(\"/api/profile\", verifyTokenWithSession, getProfile);\n  app.put(\"/api/profile\", verifyTokenWithSession, updateProfile);\n  app.post(\"/api/profile/change-password\", verifyTokenWithSession, changePassword);\n  app.delete(\"/api/profile\", verifyTokenWithSession, deleteProfile);\n  \n  // Profile picture routes\n  app.post(\"/api/profile/picture\", verifyTokenWithSession, requireUser, uploadProfilePicture);\n  app.get(\"/api/profile/picture/:userId\", getProfilePicture);\n  app.delete(\"/api/profile/picture\", verifyTokenWithSession, requireUser, removeProfilePicture);\n\n  // Auth routes\n  app.post(\"/api/register\", register);\n  app.post(\"/api/login\", login);\n  app.post(\"/api/forgot-password\", forgotPassword);\n  app.post(\"/api/reset-password\", resetPassword);\n\n  // Google OAuth routes\n  app.use(\"/api/auth\", authRouter);\n\n  // Session management routes\n  app.get(\"/api/sessions\", verifyTokenWithSession, getUserSessions);\n  app.delete(\"/api/sessions/:sessionId\", verifyTokenWithSession, revokeSession);\n  app.delete(\"/api/sessions\", verifyTokenWithSession, revokeAllSessions);\n  app.post(\"/api/sessions/refresh\", verifyTokenWithSession, refreshSession);\n\n  // Admin routes\n  app.get(\"/api/admin/stats\", verifyTokenWithSession, requireAdmin, getAdminStats);\n  app.get(\"/api/admin/users\", verifyTokenWithSession, requireAdmin, getUsers);\n  app.post(\"/api/admin/users\", verifyTokenWithSession, requireAdmin, createUser);\n  app.put(\"/api/admin/users/:id\", verifyTokenWithSession, requireAdmin, updateUser);\n  app.delete(\"/api/admin/users/:id\", verifyTokenWithSession, requireAdmin, deleteUser);\n  app.get(\"/api/admin/books\", verifyTokenWithSession, requireAdmin, getBooks);\n  app.post(\"/api/admin/books\", verifyTokenWithSession, requireAdmin, createBook);\n  app.put(\"/api/admin/books/:id\", verifyTokenWithSession, requireAdmin, updateBook);\n  app.delete(\"/api/admin/books/:id\", verifyTokenWithSession, requireAdmin, deleteBook);\n\n  // Librarian routes\n  app.get(\"/api/librarian/dashboard\", verifyTokenWithSession, requireLibrarian, getLibrarianDashboard);\n  app.get(\"/api/librarian/books\", verifyTokenWithSession, requireLibrarian, getLibrarianBooks);\n  app.get(\"/api/librarian/books/:id\", verifyTokenWithSession, requireLibrarian, getBook);\n  app.post(\"/api/librarian/books\", verifyTokenWithSession, requireLibrarian, createLibrarianBook);\n  app.put(\"/api/librarian/books/:id\", verifyTokenWithSession, requireLibrarian, updateLibrarianBook);\n  app.put(\"/api/librarian/books/:id/status\", verifyTokenWithSession, requireLibrarian, updateBookStatus);\n  app.post(\"/api/librarian/loans/issue\", verifyTokenWithSession, requireLibrarian, issueBook);\n  app.post(\"/api/librarian/loans/return\", verifyTokenWithSession, requireLibrarian, returnBook);\n  app.get(\"/api/librarian/loans\", verifyTokenWithSession, requireLibrarian, getLoans);\n  app.get(\"/api/librarian/overdue\", verifyTokenWithSession, requireLibrarian, getOverdueBooks);\n  app.get(\"/api/librarian/reservations\", verifyTokenWithSession, requireLibrarian, getReservations);\n  app.put(\"/api/librarian/reservations/:id\", verifyTokenWithSession, requireLibrarian, updateReservation);\n  app.get(\"/api/librarian/fines\", verifyTokenWithSession, requireLibrarian, getFines);\n  app.post(\"/api/librarian/fines\", verifyTokenWithSession, requireLibrarian, createFine);\n  app.put(\"/api/librarian/fines/:id\", verifyTokenWithSession, requireLibrarian, updateFine);\n  app.post(\"/api/librarian/notifications\", verifyTokenWithSession, requireLibrarian, sendNotification);\n  app.get(\"/api/librarian/users/search\", verifyTokenWithSession, requireLibrarian, searchUsers);\n  app.get(\"/api/librarian/users/:id/loans\", verifyTokenWithSession, requireLibrarian, getUserLoans);\n  app.get(\"/api/librarian/users/:id/activity\", verifyTokenWithSession, requireLibrarian, getUserActivity);\n  \n  // Inventory audit routes\n  app.get(\"/api/librarian/inventory-audits\", verifyTokenWithSession, requireLibrarian, getInventoryAudits);\n  app.post(\"/api/librarian/inventory-audits\", verifyTokenWithSession, requireLibrarian, createInventoryAudit);\n  app.put(\"/api/librarian/inventory-audits/:id\", verifyTokenWithSession, requireLibrarian, resolveInventoryAudit);\n\n  // Student routes\n  app.get(\"/api/student/stats\", verifyTokenWithSession, requireUser, getStudentStats);\n  app.get(\"/api/student/books\", verifyTokenWithSession, requireUser, getBooksForStudent);\n  app.get(\"/api/student/loans\", verifyTokenWithSession, requireUser, getStudentLoans);\n  app.post(\"/api/student/loans\", verifyTokenWithSession, requireUser, borrowBook);\n  app.post(\"/api/student/loans/:id/return\", verifyTokenWithSession, requireUser, returnStudentBook);\n  app.post(\"/api/student/loans/:id/renew\", verifyTokenWithSession, requireUser, renewLoan);\n  app.get(\"/api/student/reservations\", verifyTokenWithSession, requireUser, getStudentReservations);\n  app.post(\"/api/student/reservations\", verifyTokenWithSession, requireUser, createReservation);\n  app.delete(\"/api/student/reservations/:id\", verifyTokenWithSession, requireUser, cancelReservation);\n  app.get(\"/api/student/fines\", verifyTokenWithSession, requireUser, getStudentFines);\n  app.get(\"/api/student/notifications\", verifyTokenWithSession, requireUser, getStudentNotifications);\n  app.post(\"/api/student/notifications/:id/read\", verifyTokenWithSession, requireUser, markNotificationAsRead);\n  app.post(\"/api/student/feedback\", verifyTokenWithSession, requireUser, submitFeedback);\n  app.post(\"/api/student/suggestions\", verifyTokenWithSession, requireUser, submitBookSuggestion);\n  app.get(\"/api/student/profile\", verifyTokenWithSession, requireUser, getStudentProfile);\n\n  // Search routes\n  app.get(\"/api/search\", searchBooks);\n  app.get(\"/api/search/suggestions\", getSearchSuggestions);\n  app.use(\"/api/search\", searchRoutes);\n\n  // Book routes\n  app.use(\"/api/books\", booksRouter);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`Fusion Starter server running on port ${port}`);\n  console.log(`Frontend: http://localhost:${port}`);\n  console.log(`API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["User","GoogleStrategy","session","router","express","Loan","Reservation","Fine","user","generateUserId","bcrypt","createBook","updateBook","app","authRouter","createLibrarianBook","updateLibrarianBook","booksRouter"],"mappings":"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"}