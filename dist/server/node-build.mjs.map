{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/profile.ts","../../server/routes/auth.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\r\nimport { DemoResponse } from \"@shared/api\";\r\n\r\nexport const handleDemo: RequestHandler = (req, res) => {\r\n  const response: DemoResponse = {\r\n    message: \"Hello from Express server\",\r\n  };\r\n  res.status(200).json(response);\r\n};\r\n","import { Request, Response } from \"express\";\r\n\r\n// Mock user data (in-memory for demo)\r\nlet mockUser = {\r\n  id: 1,\r\n  name: \"John Doe\",\r\n  email: \"john@example.com\",\r\n  preferences: {\r\n    notifications: true,\r\n    defaultSearch: \"title\",\r\n    displayMode: \"list\",\r\n  },\r\n  password: \"password123\", // In real apps, never store plain text!\r\n};\r\n\r\n// GET /api/profile\r\nexport function getProfile(req: Request, res: Response) {\r\n  // In real app, get userId from auth/session\r\n  res.json({ ...mockUser, password: undefined });\r\n}\r\n\r\n// PUT /api/profile\r\nexport function updateProfile(req: Request, res: Response) {\r\n  const { name, email, preferences } = req.body;\r\n  if (name) mockUser.name = name;\r\n  if (email) mockUser.email = email;\r\n  if (preferences) mockUser.preferences = { ...mockUser.preferences, ...preferences };\r\n  res.json({ success: true, user: { ...mockUser, password: undefined } });\r\n}\r\n\r\n// POST /api/profile/change-password\r\nexport function changePassword(req: Request, res: Response) {\r\n  const { oldPassword, newPassword } = req.body;\r\n  if (oldPassword !== mockUser.password) {\r\n    return res.status(400).json({ success: false, message: \"Old password incorrect\" });\r\n  }\r\n  mockUser.password = newPassword;\r\n  res.json({ success: true });\r\n}\r\n\r\n// DELETE /api/profile\r\nexport function deleteProfile(req: Request, res: Response) {\r\n  mockUser = null;\r\n  res.json({ success: true });\r\n} ","import { Request, Response } from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\n// User schema and model\r\nconst userSchema = new mongoose.Schema({\r\n  name: String,\r\n  email: { type: String, unique: true },\r\n  passwordHash: String,\r\n  preferences: {\r\n    notifications: { type: Boolean, default: true },\r\n    defaultSearch: { type: String, default: \"title\" },\r\n    displayMode: { type: String, default: \"list\" },\r\n  },\r\n});\r\nconst User = mongoose.model(\"User\", userSchema);\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"dev_secret\";\r\n\r\n// POST /api/register\r\nexport async function register(req: Request, res: Response) {\r\n  const { name, email, password } = req.body;\r\n  if (!name || !email || !password) {\r\n    return res.status(400).json({ success: false, message: \"All fields required\" });\r\n  }\r\n  try {\r\n    const existing = await User.findOne({ email });\r\n    if (existing) {\r\n      return res.status(400).json({ success: false, message: \"Email already registered\" });\r\n    }\r\n    const passwordHash = await bcrypt.hash(password, 10);\r\n    const user = await User.create({ name, email, passwordHash });\r\n    res.json({ success: true, user: { id: user._id, name: user.name, email: user.email } });\r\n  } catch (err) {\r\n    res.status(500).json({ success: false, message: \"Registration failed\", error: err });\r\n  }\r\n}\r\n\r\n// POST /api/login\r\nexport async function login(req: Request, res: Response) {\r\n  const { email, password } = req.body;\r\n  if (!email || !password) {\r\n    return res.status(400).json({ success: false, message: \"All fields required\" });\r\n  }\r\n  try {\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(400).json({ success: false, message: \"Invalid credentials\" });\r\n    }\r\n    const valid = await bcrypt.compare(password, user.passwordHash);\r\n    if (!valid) {\r\n      return res.status(400).json({ success: false, message: \"Invalid credentials\" });\r\n    }\r\n    // Issue JWT\r\n    const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: \"7d\" });\r\n    res.json({ success: true, token, user: { id: user._id, name: user.name, email: user.email } });\r\n  } catch (err) {\r\n    res.status(500).json({ success: false, message: \"Login failed\", error: err });\r\n  }\r\n}\r\n\r\n// Export User model for use in profile endpoints\r\nexport { User }; ","import express from \"express\";\r\nimport cors from \"cors\";\r\nimport { handleDemo } from \"./routes/demo\";\r\nimport { getProfile, updateProfile, changePassword, deleteProfile } from \"./routes/profile\";\r\nimport mongoose from \"mongoose\";\r\nimport { register, login } from \"./routes/auth\";\r\n\r\nexport function createServer() {\r\n  const app = express();\r\n\r\n  // Connect to MongoDB\r\n  const MONGO_URI = process.env.MONGO_URI || \"mongodb://localhost:27017/library\";\r\n  mongoose.connect(MONGO_URI).then(() => {\r\n    console.log(\"Connected to MongoDB\");\r\n  }).catch((err) => {\r\n    console.error(\"MongoDB connection error:\", err);\r\n  });\r\n\r\n  // Middleware\r\n  app.use(cors());\r\n  app.use(express.json());\r\n  app.use(express.urlencoded({ extended: true }));\r\n\r\n  // Example API routes\r\n  app.get(\"/api/ping\", (_req, res) => {\r\n    res.json({ message: \"Hello from Express server v2!\" });\r\n  });\r\n\r\n  app.get(\"/api/demo\", handleDemo);\r\n  app.get(\"/api/profile\", getProfile);\r\n  app.put(\"/api/profile\", updateProfile);\r\n  app.post(\"/api/profile/change-password\", changePassword);\r\n  app.delete(\"/api/profile\", deleteProfile);\r\n\r\n  // Auth routes\r\n  app.post(\"/api/register\", register);\r\n  app.post(\"/api/login\", login);\r\n\r\n  return app;\r\n}\r\n","import path from \"path\";\r\nimport { createServer } from \"./index\";\r\nimport * as express from \"express\";\r\n\r\nconst app = createServer();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// In production, serve the built SPA files\r\nconst __dirname = import.meta.dirname;\r\nconst distPath = path.join(__dirname, \"../spa\");\r\n\r\n// Serve static files\r\napp.use(express.static(distPath));\r\n\r\n// Handle React Router - serve index.html for all non-API routes\r\napp.get(\"*\", (req, res) => {\r\n  // Don't serve index.html for API routes\r\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\r\n    return res.status(404).json({ error: \"API endpoint not found\" });\r\n  }\r\n\r\n  res.sendFile(path.join(distPath, \"index.html\"));\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`ðŸš€ Fusion Starter server running on port ${port}`);\r\n  console.log(`ðŸ“± Frontend: http://localhost:${port}`);\r\n  console.log(`ðŸ”§ API: http://localhost:${port}/api`);\r\n});\r\n\r\n// Graceful shutdown\r\nprocess.on(\"SIGTERM\", () => {\r\n  console.log(\"ðŸ›‘ Received SIGTERM, shutting down gracefully\");\r\n  process.exit(0);\r\n});\r\n\r\nprocess.on(\"SIGINT\", () => {\r\n  console.log(\"ðŸ›‘ Received SIGINT, shutting down gracefully\");\r\n  process.exit(0);\r\n});\r\n"],"names":["app","express"],"mappings":"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"}